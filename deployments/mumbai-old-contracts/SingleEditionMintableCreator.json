{
  "address": "0x9b95e22Cd51A17Eda833d5a0596a08e111F792c8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_implementations",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "editionContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "implementation",
          "type": "uint8"
        }
      ],
      "name": "CreatedEdition",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "url",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "sha256hash",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Versions.UrlWithHash[]",
                  "name": "urls",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint8[3]",
                  "name": "label",
                  "type": "uint8[3]"
                }
              ],
              "internalType": "struct Versions.Version",
              "name": "version",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "editionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royaltyBPS",
              "type": "uint256"
            }
          ],
          "internalType": "struct SingleEditionMintableCreator.EditionData",
          "name": "editionData",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "implementation",
          "type": "uint8"
        }
      ],
      "name": "createEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "implementation",
          "type": "uint8"
        }
      ],
      "name": "getEditionAtId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6441f3e02d06ba70f108042fb76a6b1359f98a3363ae4055e161fb9634e1b86c",
  "receipt": {
    "to": null,
    "from": "0x5f0009F23251fEB0f58c8e3aAb8E096Af16FaECD",
    "contractAddress": "0x9b95e22Cd51A17Eda833d5a0596a08e111F792c8",
    "transactionIndex": 5,
    "gasUsed": "657278",
    "logsBloom": "0x0000000000000000000000000000000080000000000000000000001000000000000000000000002000000000000000000000800000000000000000000000000000000000000000000000000000000080000000000000000000010000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000c000000000000000000001000000000000000000000000000000100000001000000000000000000000000000000000000000000000000000000000010000100000",
    "blockHash": "0x4c86dcbbd4926141d63431af3d412eeae3d73dc7bbafeea5b85db4778615776a",
    "transactionHash": "0x6441f3e02d06ba70f108042fb76a6b1359f98a3363ae4055e161fb9634e1b86c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 26335799,
        "transactionHash": "0x6441f3e02d06ba70f108042fb76a6b1359f98a3363ae4055e161fb9634e1b86c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f0009f23251feb0f58c8e3aab8e096af16faecd",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000460db9c94d316400000000000000000000000000000000000000000000000021c61ccf3527ac82000000000000000000000000000000000000000000000227d18203a07dc813be00000000000000000000000000000000000000000000000021800f156bda7b1e000000000000000000000000000000000000000000000227d1c8115a47154522",
        "logIndex": 510,
        "blockHash": "0x4c86dcbbd4926141d63431af3d412eeae3d73dc7bbafeea5b85db4778615776a"
      }
    ],
    "blockNumber": 26335799,
    "cumulativeGasUsed": "16547642",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x20930978b2a6Db412c3C4281FEdFc68063f39262",
      "0x94e63759491B0EFfeAa2495d9e7D94A3fAB34579"
    ]
  ],
  "solcInputHash": "56169438e4bb47f778d0edd9e861ea14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_implementations\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"editionContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"name\":\"CreatedEdition\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"sha256hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Versions.UrlWithHash[]\",\"name\":\"urls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct Versions.Version\",\"name\":\"version\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBPS\",\"type\":\"uint256\"}],\"internalType\":\"struct SingleEditionMintableCreator.EditionData\",\"name\":\"editionData\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"name\":\"createEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"name\":\"getEditionAtId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CreatedEdition(uint256,address,uint256,address,uint8)\":{\"params\":{\"editionId\":\"ID of newly created edition\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_implementations\":\"Array of addresse for implementations of SingleEditionMintable like contracts to clone\"}},\"createEdition((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)\":{\"params\":{\"editionData\":\"EditionData of the edition contract\",\"implementation\":\"Implementation of the edition contract\"}},\"getEditionAtId(uint256,uint8)\":{\"params\":{\"editionId\":\"id of edition to get contract for\"},\"returns\":{\"_0\":\"SingleEditionMintable Edition NFT contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CreatedEdition(uint256,address,uint256,address,uint8)\":{\"notice\":\"Emitted when a edition is created reserving the corresponding token IDs.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes factory with address of implementations logic\"},\"createEdition((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)\":{\"notice\":\"Creates a new edition contract as a factory with a deterministic address\"},\"getEditionAtId(uint256,uint8)\":{\"notice\":\"Get edition given the created ID\"},\"implementations(uint256)\":{\"notice\":\"Address for implementation of SingleEditionMintable to clone\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SingleEditionMintableCreator.sol\":\"SingleEditionMintableCreator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf4059b28b9d7c342804d33b16ea30c65ca6afd560e426b44ca727a0343c04c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/ISeededEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nstruct MintData {\\n  address to;\\n  uint256 seed;\\n}\\n\\ninterface ISeededEditionSingleMintable {\\n  function mintEdition(address to, uint256 seed) external returns (uint256);\\n  function mintEditions(MintData[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x758c5770e6ebfba6a7b4d027125b7acf1692088e30bc966b30671686feff2355\",\"license\":\"GPL-3.0\"},\"contracts/SeededSingleEditionMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580 \\u2588\\u2580\\u2580 \\u2588\\u2580\\u2580 \\u2588\\u2580\\u2584 \\u2588\\u2580\\u2580 \\u2588\\u2580\\u2584   \\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2584\\u2588 \\u2588\\u2588\\u2584 \\u2588\\u2588\\u2584 \\u2588\\u2584\\u2580 \\u2588\\u2588\\u2584 \\u2588\\u2584\\u2580   \\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588   \\u2580\\u2584\\u2580   \\u2588\\u2580\\u2588 \\u2588  \\u2580\\u2588\\u2580 \\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588   \\u2588\\u2591\\u2588   \\u2588\\u2584\\u2588 \\u2588\\u2584 \\u2591\\u2588\\u2591 \\u2588\\u2580\\u2588\\n\\n */\\n\\npragma solidity ^0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {SharedNFTLogic, MediaData} from \\\"./SharedNFTLogic.sol\\\";\\nimport {ISeededEditionSingleMintable, MintData} from \\\"./ISeededEditionSingleMintable.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\n\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    This is a fork of Zora NFT Editions\\n    changes:\\n        - Media urls are versioned allowing for updatable content preserving history\\n        - The NFT contract address is included in edition url query for easyier access to query the graph from within the NFT\\n        - SupportsInterface function includes IEditionSingleMintable\\n\\n    @dev This allows creators to mint a unique serial edition of the same media within a custom contract\\n    @author iain nash\\n    Repository: https://github.com/ourzora/nft-editions\\n*/\\ncontract SeededSingleEditionMintable is\\n    ERC721Upgradeable,\\n    ISeededEditionSingleMintable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using Versions for Versions.Set;\\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n\\n    /**\\n     @param label the semantic version label that the url is being updated\\n     @param index the url index 0 = image, 1 = animation\\n     @param url the url to be updated to\\n    */\\n    event VersionURLUpdated(uint8[3] label, uint8 index, string url);\\n\\n    /**\\n     @param label the semantic version label added\\n    */\\n    event VersionAdded(uint8[3] label);\\n\\n    /**\\n     @param owner the address of the owner of the editions contract\\n     @param minter the address of the approved minter\\n     @param approved a boolean indicating the approval status\\n    */\\n    event ApprovedMinter(address indexed owner, address indexed minter, bool approved);\\n\\n    // metadata\\n    string public description;\\n\\n    // Media Urls\\n    enum URLS  {\\n        Image,\\n        Animation\\n    }\\n    // Versions of Media Urls\\n    Versions.Set private versions;\\n\\n    // Total size of edition that can be minted\\n    uint256 public editionSize;\\n    // Current token id minted\\n    CountersUpgradeable.Counter private atEditionId;\\n    // Royalty amount in bps\\n    uint256 public royaltyBPS;\\n    // Addresses allowed to mint edition\\n    mapping(address => bool) allowedMinters;\\n\\n    // Mapping from seed to bool\\n    mapping(uint256 => bool) public seedsUsed;\\n    // Mapping from tokenId to seed\\n    mapping(uint256 => uint256) public seedOfTokens;\\n\\n    // Price for sale\\n    uint256 public salePrice;\\n\\n    // NFT rendering logic contract\\n    SharedNFTLogic private immutable sharedNFTLogic;\\n\\n    // Global constructor for factory\\n    constructor(SharedNFTLogic _sharedNFTLogic) {\\n        sharedNFTLogic = _sharedNFTLogic;\\n    }\\n\\n    /**\\n      @param _owner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\\n      @param _name Name of edition, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _description Description of edition, used in the description field of the NFT\\n      @param _version Version of the media consisting of urls and hashes of animation and image content\\n      @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @dev Function to create a new edition. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the edition.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        Versions.Version memory _version,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n        description = _description;\\n        editionSize = _editionSize;\\n        royaltyBPS = _royaltyBPS;\\n        // Set edition id start to be 1 not 0\\n        atEditionId.increment();\\n\\n        // Add first version\\n        versions.addVersion(_version);\\n        emit VersionAdded(_version.label);\\n    }\\n\\n\\n    /// @dev returns the number of minted tokens within the edition\\n    function totalSupply() public view returns (uint256) {\\n        return atEditionId.current() - 1;\\n    }\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through ISingleEditionMintable interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase a edition edition\\n           at the given price in the contract.\\n      @param seed the chosen seed number\\n     */\\n    function purchase(uint256 seed) external payable returns (uint256) {\\n        require(salePrice > 0, \\\"Not for sale\\\");\\n        require(msg.value == salePrice, \\\"Wrong price\\\");\\n        MintData[] memory toMint = new MintData[](1);\\n        toMint[0] = MintData(msg.sender, seed);\\n        emit EditionSold(salePrice, msg.sender);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\\n        salePrice = _salePrice;\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        // No need for gas limit to trusted address.\\n        AddressUpgradeable.sendValue(payable(owner()), address(this).balance);\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (owner() == msg.sender) {\\n            return true;\\n        }\\n        if (allowedMinters[address(0x0)]) {\\n            return true;\\n        }\\n        return allowedMinters[msg.sender];\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @param seed number of the chosen seed\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to, uint256 seed) external override returns (uint256) {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        MintData[] memory toMint = new MintData[](1);\\n        toMint[0] = MintData(to, seed);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param recipients list of addresses and seeds to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(MintData[] memory recipients)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        return _mintEditions(recipients);\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, ISeededEditionSingleMintable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\n        allowedMinters[minter] = allowed;\\n        emit ApprovedMinter(_msgSender(), minter, allowed);\\n    }\\n\\n    /**\\n      @dev Updates a url of specified version by the owner of the edition.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n      @param _label The label of the specified version\\n      @param _urlKey The index of the url to update 0=animation, 1=image\\n      @param _url The url to be updated to\\n     */\\n    function updateVersionURL(\\n        uint8[3] memory _label,\\n        uint8 _urlKey,\\n        string memory _url\\n    ) public onlyOwner {\\n        versions.updateVersionURL(_label, _urlKey, _url);\\n        emit VersionURLUpdated(_label, _urlKey, _url);\\n    }\\n\\n    /**\\n      @dev Adds new version of the media updating the urls rendered in the metadata.\\n           The order added determins order stored, the label has no effect.\\n      @param _version The version to be added consisting of urls, hashes and a label\\n     */\\n    function addVersion(\\n        Versions.Version memory _version\\n    ) public onlyOwner {\\n        versions.addVersion(_version);\\n        emit VersionAdded(_version.label);\\n    }\\n\\n    function getVersionHistory()\\n        public\\n        view\\n        returns (Versions.Version[] memory)\\n    {\\n        return versions.getAllVersions();\\n    }\\n\\n    /**\\n     @dev returns the number of editions allowed to mint (max_uint256 when open edition)\\n     @return allowedToMint the number of editions allowed to mint\\n    */\\n    function numberCanMint() public view override returns (uint256) {\\n        // Return max int if open edition\\n        if (editionSize == 0) {\\n            return type(uint256).max;\\n        }\\n        // atEditionId is one-indexed hence the need to remove one here\\n        return editionSize + 1 - atEditionId.current();\\n    }\\n\\n    /**\\n        @dev burns token id if owner or approved owner\\n        @param tokenId Token ID to burn\\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n        @dev checks if seed is in valid range, between 1 and editionSize\\n        @param seed uint256 of the seed\\n        @return isInRange boolean representing if the seed is in the valid range\\n    */\\n    function _isSeedInRange(uint256 seed) private view returns (bool) {\\n        return ((seed > 0) && (seed <= editionSize));\\n    }\\n\\n    /**\\n        @dev internal function that allocates seed number to nft id\\n        @param tokenId Token ID for the seed to be allocated to\\n        @param seed Seed to be used\\n    */\\n    function _useSeed(uint256 tokenId, uint256 seed) internal {\\n        // check if seed has been used\\n        require(seedsUsed[seed] == false, \\\"Seed already used\\\");\\n        // check if seed is out of range\\n        require(_isSeedInRange(seed), \\\"Seed out of range\\\");\\n\\n        // allocate seed to id\\n        seedsUsed[seed] = true;\\n        seedOfTokens[tokenId] = seed;\\n    }\\n\\n    /**\\n      @dev Private function to mint als without any access checks.\\n           Called by the public edition minting functions.\\n           allocates requested seeds\\n     */\\n    function _mintEditions(MintData[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 startAt = atEditionId.current();\\n        uint256 endAt = startAt + recipients.length - 1;\\n        require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\n\\n        while (atEditionId.current() <= endAt) {\\n            _useSeed(\\n                atEditionId.current(),\\n                recipients[atEditionId.current() - startAt].seed\\n            );\\n\\n            _mint(\\n                recipients[atEditionId.current() - startAt].to,\\n                atEditionId.current()\\n            );\\n            atEditionId.increment();\\n        }\\n        return atEditionId.current();\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT, will retrieve URIs from the last added version\\n      @return imageUrl The url of the image\\n      @return imageHash  A sha-256 hash of the content on the imageUrl, will be zero address if url blank\\n      @return animationUrl The url of the animation\\n      @return animationHash A sha-256 hash of the content on the animationUrl, will be zero address if url blank\\n     */\\n    function getURIs()\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        Versions.Version memory latest = versions.getLatestVersion();\\n        return (\\n            latest.urls[uint8(URLS.Image)].url,\\n            latest.urls[uint8(URLS.Image)].sha256hash,\\n            latest.urls[uint8(URLS.Animation)].url,\\n            latest.urls[uint8(URLS.Animation)].sha256hash\\n        );\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT of a version\\n           Will get URIs from the last version added\\n      @param label The label of the version\\n      @return imageUrl\\n      @return imageHash\\n      @return animationUrl\\n      @return animationHash\\n     */\\n    function getURIsOfVersion(\\n        uint8[3] memory label\\n    )\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        Versions.Version memory version = versions.getVersion(label);\\n        return (\\n            version.urls[uint8(URLS.Image)].url,\\n            version.urls[uint8(URLS.Image)].sha256hash,\\n            version.urls[uint8(URLS.Animation)].url,\\n            version.urls[uint8(URLS.Animation)].sha256hash\\n        );\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id, will retrieve URIs from the last added version\\n        @param tokenId token id to get uri for\\n        @return metadata base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        Versions.Version memory version = versions.getLatestVersion();\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                MediaData(\\n                    version.urls[uint8(URLS.Image)].url,\\n                    version.urls[uint8(URLS.Animation)].url,\\n                    version.label\\n                ),\\n                tokenId,\\n                editionSize,\\n                address(this),\\n                seedOfTokens[tokenId]\\n            );\\n    }\\n\\n    /**\\n        @dev Get URI for given token id of given version\\n        @param tokenId token id to get uri for\\n        @param label the label of the version\\n        @return metadata base64-encoded json metadata object\\n    */\\n    function tokenURIOfVersion(\\n        uint256 tokenId,\\n        uint8[3] memory label\\n    )\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        Versions.Version memory version = versions.getVersion(label);\\n\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                MediaData(\\n                    version.urls[uint8(URLS.Image)].url,\\n                    version.urls[uint8(URLS.Animation)].url,\\n                    version.label\\n                ),\\n                tokenId,\\n                editionSize,\\n                address(this),\\n                seedOfTokens[tokenId]\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(ISeededEditionSingleMintable).interfaceId == interfaceId ||\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x754789420b64c50d68334b34c5c308a70d806e13e16e4b23b9093d4d2ca6a43c\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\n\\nstruct MediaData{\\n    string imageUrl;\\n    string animationUrl;\\n    uint8[3] label;\\n}\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// @notice converts address to string\\n    /// @param _address address to return as a string\\n    function addressToString(address _address) public pure returns(string memory) {\\n        bytes20 _bytes = bytes20(_address);\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for(uint i = 0; i < 20; i++) {\\n            _string[2+i*2] = HEX[uint8(_bytes[i] >> 4)];\\n            _string[3+i*2] = HEX[uint8(_bytes[i] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    // Proxy to olta's uintArray3ToString function\\n    function uintArray3ToString (uint8[3] memory label)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return Versions.uintArray3ToString(label);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress,\\n            tokenSeed\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?id=\\\", // if just url \\\"/id\\\" this will work with arweave pathmanifests\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?seed=\\\",\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        \\\"&seed=\\\",\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?seed=\\\", // if just url \\\"/id\\\" this will work with arweave pathmanifests\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        \\\"&seed=\\\",\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x79028cd676d78cc7b4b89b4e809ba73df7d4c296f2b934b09484d071c0c5ba19\",\"license\":\"GPL-3.0\"},\"contracts/SingleEditionMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588   \\u2580\\u2584\\u2580   \\u2588\\u2580\\u2588 \\u2588  \\u2580\\u2588\\u2580 \\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588   \\u2588\\u2591\\u2588   \\u2588\\u2584\\u2588 \\u2588\\u2584 \\u2591\\u2588\\u2591 \\u2588\\u2580\\u2588\\n\\n */\\n\\npragma solidity ^0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {SharedNFTLogic, MediaData} from \\\"./SharedNFTLogic.sol\\\";\\nimport {IEditionSingleMintable} from \\\"./IEditionSingleMintable.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\n\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    This is a fork of Zora NFT Editions\\n    changes:\\n        - Media urls are versioned allowing for updatable content preserving history\\n        - The NFT contract address is included in edition url query for easyier access to query the graph from within the NFT\\n        - SupportsInterface function includes IEditionSingleMintable\\n\\n    @dev This allows creators to mint a unique serial edition of the same media within a custom contract\\n    @author iain nash\\n    Repository: https://github.com/ourzora/nft-editions\\n*/\\ncontract SingleEditionMintable is\\n    ERC721Upgradeable,\\n    IEditionSingleMintable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using Versions for Versions.Set;\\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n    event VersionURLUpdated(uint8[3] label, uint8 index, string url);\\n    event VersionAdded(uint8[3] label);\\n    event ApprovedMinter(address indexed owner, address indexed minter, bool approved);\\n\\n    // metadata\\n    string public description;\\n\\n    // Media Urls\\n    // animation_url and image_url metadata\\n    // TODO: swap these around and test they match\\n    enum URLS  {\\n        Image,\\n        Animation\\n    }\\n    // Versions of Media Urls\\n    Versions.Set private versions;\\n\\n    // Total size of edition that can be minted\\n    uint256 public editionSize;\\n    // Current token id minted\\n    CountersUpgradeable.Counter private atEditionId;\\n    // Royalty amount in bps\\n    uint256 public royaltyBPS;\\n    // Addresses allowed to mint edition\\n    mapping(address => bool) allowedMinters;\\n\\n    // Price for sale\\n    uint256 public salePrice;\\n\\n    // NFT rendering logic contract\\n    SharedNFTLogic private immutable sharedNFTLogic;\\n\\n    // Global constructor for factory\\n    constructor(SharedNFTLogic _sharedNFTLogic) {\\n        sharedNFTLogic = _sharedNFTLogic;\\n    }\\n\\n    /**\\n      @param _owner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\\n      @param _name Name of edition, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _description Description of edition, used in the description field of the NFT\\n      @param _version Version of the media consisting of urls and hashes of animation and image content\\n      @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @dev Function to create a new edition. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the edition.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        Versions.Version memory _version,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n        description = _description;\\n        editionSize = _editionSize;\\n        royaltyBPS = _royaltyBPS;\\n        // Set edition id start to be 1 not 0\\n        atEditionId.increment();\\n\\n        // Add first version\\n        versions.addVersion(_version);\\n        emit VersionAdded(_version.label);\\n    }\\n\\n\\n    /// @dev returns the number of minted tokens within the edition\\n    function totalSupply() public view returns (uint256) {\\n        return atEditionId.current() - 1;\\n    }\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through ISingleEditionMintable interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase a edition edition\\n           at the given price in the contract.\\n     */\\n    function purchase() external payable returns (uint256) {\\n        require(salePrice > 0, \\\"Not for sale\\\");\\n        require(msg.value == salePrice, \\\"Wrong price\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = msg.sender;\\n        emit EditionSold(salePrice, msg.sender);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\\n        salePrice = _salePrice;\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        // No need for gas limit to trusted address.\\n        AddressUpgradeable.sendValue(payable(owner()), address(this).balance);\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (owner() == msg.sender) {\\n            return true;\\n        }\\n        if (allowedMinters[address(0x0)]) {\\n            return true;\\n        }\\n        return allowedMinters[msg.sender];\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to) external override returns (uint256) {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = to;\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(address[] memory recipients)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        return _mintEditions(recipients);\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IEditionSingleMintable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\n        allowedMinters[minter] = allowed;\\n        emit ApprovedMinter(_msgSender(), minter, allowed);\\n    }\\n\\n    /**\\n      @dev Updates a url of specified version by the owner of the edition.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n      @param _label The label of the specified version\\n      @param _urlKey The index of the url to update 0=animation, 1=image\\n      @param _url The url to be updated to\\n     */\\n    function updateVersionURL(\\n        uint8[3] memory _label,\\n        uint8 _urlKey,\\n        string memory _url\\n    ) public onlyOwner {\\n        versions.updateVersionURL(_label, _urlKey, _url);\\n        emit VersionURLUpdated(_label, _urlKey, _url);\\n    }\\n\\n    /**\\n      @dev Adds new version of the media updating the urls rendered in the metadata.\\n           The order added determins order stored, the label has no effect.\\n      @param _version The version to be added consisting of urls, hashes and a label\\n     */\\n    function addVersion(\\n        Versions.Version memory _version\\n    ) public onlyOwner {\\n        versions.addVersion(_version);\\n        emit VersionAdded(_version.label);\\n    }\\n\\n    function getVersionHistory()\\n        public\\n        view\\n        returns (Versions.Version[] memory)\\n    {\\n        return versions.getAllVersions();\\n    }\\n\\n    /// Returns the number of editions allowed to mint (max_uint256 when open edition)\\n    function numberCanMint() public view override returns (uint256) {\\n        // Return max int if open edition\\n        if (editionSize == 0) {\\n            return type(uint256).max;\\n        }\\n        // atEditionId is one-indexed hence the need to remove one here\\n        return editionSize + 1 - atEditionId.current();\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id\\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n      @dev Private function to mint als without any access checks.\\n           Called by the public edition minting functions.\\n     */\\n    function _mintEditions(address[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 startAt = atEditionId.current();\\n        uint256 endAt = startAt + recipients.length - 1;\\n        require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\n        while (atEditionId.current() <= endAt) {\\n            _mint(\\n                recipients[atEditionId.current() - startAt],\\n                atEditionId.current()\\n            );\\n            atEditionId.increment();\\n        }\\n        return atEditionId.current();\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT\\n            Will get URIs from the last version added\\n      @return imageUrl, imageHash, animationUrl, animationHash\\n     */\\n    function getURIs()\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        Versions.Version memory latest = versions.getLatestVersion();\\n        return (\\n            latest.urls[uint8(URLS.Image)].url,\\n            latest.urls[uint8(URLS.Image)].sha256hash,\\n            latest.urls[uint8(URLS.Animation)].url,\\n            latest.urls[uint8(URLS.Animation)].sha256hash\\n        );\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT of a version\\n           Will get URIs from the last version added\\n      @param label The label of the version\\n      @return imageUrl, imageHash, animationUrl, animationHash\\n     */\\n    function getURIsOfVersion(\\n        uint8[3] memory label\\n    )\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        Versions.Version memory version = versions.getVersion(label);\\n        return (\\n            version.urls[uint8(URLS.Image)].url,\\n            version.urls[uint8(URLS.Image)].sha256hash,\\n            version.urls[uint8(URLS.Animation)].url,\\n            version.urls[uint8(URLS.Animation)].sha256hash\\n        );\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n             Will get URIs from the last version added\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        Versions.Version memory version = versions.getLatestVersion();\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                MediaData(\\n                    version.urls[uint8(URLS.Image)].url,\\n                    version.urls[uint8(URLS.Animation)].url,\\n                    version.label\\n                ),\\n                tokenId,\\n                editionSize,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n        @dev Get URI for given token id of version\\n        @param tokenId token id to get uri for\\n        @param label the label of the version\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURIOfVersion(\\n        uint256 tokenId,\\n        uint8[3] memory label\\n    )\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        Versions.Version memory version = versions.getVersion(label);\\n\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                MediaData(\\n                    version.urls[uint8(URLS.Image)].url,\\n                    version.urls[uint8(URLS.Animation)].url,\\n                    version.label\\n                ),\\n                tokenId,\\n                editionSize,\\n                address(this)\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IEditionSingleMintable).interfaceId == interfaceId ||\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6e5525a118ef6ff4770b1f894c23c40bbc60f2d509849652125254e530c4a13e\",\"license\":\"GPL-3.0\"},\"contracts/SingleEditionMintableCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588\\n\\n */\\n\\npragma solidity ^0.8.6;\\n\\nimport {ClonesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\nimport \\\"./SingleEditionMintable.sol\\\";\\nimport \\\"./SeededSingleEditionMintable.sol\\\";\\n\\ncontract SingleEditionMintableCreator {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    enum Implementation {\\n        editions,\\n        seededEditions\\n    }\\n\\n    /// Important: None of these fields can be changed after calling\\n    /// urls can be updated and upgraded via the versions interface\\n    struct EditionData {\\n        string name; // Name of the edition contract\\n        string symbol; // Symbol of the edition contract\\n        string description; /// Metadata: Description of the edition entry\\n        Versions.Version version; /// Version media with animation url, animation sha256hash, image url, image sha256hash\\n        uint256 editionSize; /// Total size of the edition (number of possible editions)\\n        uint256 royaltyBPS; /// BPS amount of royalty\\n    }\\n\\n    /// Counter for current contract id upgraded\\n    CountersUpgradeable.Counter[2] private atContracts;\\n\\n    /// Address for implementation of SingleEditionMintable to clone\\n    address[2] public implementations;\\n\\n    /// Initializes factory with address of implementations logic\\n    /// @param _implementations Array of addresse for implementations of SingleEditionMintable like contracts to clone\\n    constructor(address[] memory _implementations) {\\n        implementations[uint8(Implementation.editions)] = _implementations[uint8(Implementation.editions)];\\n        implementations[uint8(Implementation.seededEditions)] = _implementations[uint8(Implementation.seededEditions)];\\n    }\\n\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// @param editionData EditionData of the edition contract\\n    /// @param implementation Implementation of the edition contract\\n\\n    function createEdition(\\n        EditionData memory editionData,\\n        uint8 implementation\\n    ) external returns (uint256) {\\n        uint256 newId = atContracts[implementation].current();\\n        address newContract = ClonesUpgradeable.cloneDeterministic(\\n            implementations[implementation],\\n            bytes32(abi.encodePacked(newId))\\n        );\\n\\n        // Editions\\n        if (implementation == uint8(Implementation.editions)){\\n            SingleEditionMintable(newContract).initialize(\\n                msg.sender,\\n                editionData.name,\\n                editionData.symbol,\\n                editionData.description,\\n                editionData.version,\\n                editionData.editionSize,\\n                editionData.royaltyBPS\\n            );\\n        }\\n\\n        // Seeded Editions\\n        if (implementation == uint8(Implementation.seededEditions)){\\n            SeededSingleEditionMintable(newContract).initialize(\\n                msg.sender,\\n                editionData.name,\\n                editionData.symbol,\\n                editionData.description,\\n                editionData.version,\\n                editionData.editionSize,\\n                editionData.royaltyBPS\\n            );\\n        }\\n\\n        emit CreatedEdition(newId, msg.sender, editionData.editionSize, newContract, implementation);\\n        // Returns the ID of the recently created minting contract\\n        // Also increments for the next contract creation call\\n        atContracts[implementation].increment();\\n        return newId;\\n    }\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId, uint8 implementation)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return\\n            ClonesUpgradeable.predictDeterministicAddress(\\n                implementations[implementation],\\n                bytes32(abi.encodePacked(editionId)),\\n                address(this)\\n            );\\n    }\\n\\n    /// Emitted when a edition is created reserving the corresponding token IDs.\\n    /// @param editionId ID of newly created edition\\n    event CreatedEdition(\\n        uint256 indexed editionId,\\n        address indexed creator,\\n        uint256 editionSize,\\n        address editionContractAddress,\\n        uint8 implementation\\n    );\\n}\\n\",\"keccak256\":\"0xca71e15c691477c6d1214ef387031e7a9b1260255de2c8822147a6ea5f21c572\",\"license\":\"GPL-3.0\"},\"contracts/Versions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n/*\\n    please note this is work in progress and not ready for production just yet\\n*/\\n\\n/**\\n @title A libary for versioning of NFT content and metadata\\n @dev Provides versioning for nft content and follows the semantic labeling convention.\\n Each version contains an array of content and content hash pairs as well as a version label.\\n Versions can be added and urls can be updated along with getters to retrieve specific versions and history.\\n\\n Include with `using Versions for Versions.set;`\\n @author george baldwin\\n */\\nlibrary Versions {\\n\\n    struct UrlWithHash {\\n        string url;\\n        bytes32 sha256hash;\\n    }\\n\\n    struct Version {\\n        UrlWithHash[] urls;\\n        uint8[3] label;\\n    }\\n\\n    struct Set {\\n        string[] labels;\\n        mapping(string => Version) versions;\\n    }\\n\\n    /**\\n     @dev creates a new version from array of url hashe pairs and a semantic label\\n     @param urls An array of urls with sha-256 hash of the content on that url\\n     @param label a version label in a semantic style\\n     */\\n    function createVersion(\\n        UrlWithHash[] memory urls,\\n        uint8[3] memory label\\n    )\\n        internal\\n        pure\\n        returns (Version memory)\\n    {\\n        Version memory version = Version(urls, label);\\n        return version;\\n    }\\n\\n    /**\\n     @dev adds a version to a given set by pushing the version label to an array\\n        and mapping the version to a string of that label. Will revert if the label already exists.\\n     @param set the set to add the version to\\n     @param version the version that will be stored\\n     */\\n    function addVersion(\\n        Set storage set,\\n        Version memory version\\n    ) internal {\\n\\n        string memory labelKey = uintArray3ToString(version.label);\\n\\n        require(\\n            set.versions[labelKey].urls.length == 0,\\n            \\\"#Versions: A version with that label already exists\\\"\\n        );\\n\\n        // add to labels array\\n        set.labels.push(labelKey);\\n\\n        // store urls and hashes in mapping\\n        for (uint256 i = 0; i < version.urls.length; i++){\\n            set.versions[labelKey].urls.push(version.urls[i]);\\n        }\\n\\n        // store label\\n        set.versions[labelKey].label = version.label;\\n    }\\n\\n    /**\\n     @dev gets a version from a given set. Will revert if the version doesn't exist.\\n     @param set The set to get the version from\\n     @param label The label of the requested version\\n     @return version The version corrosponeding to the label\\n     */\\n    function getVersion(\\n        Set storage set,\\n        uint8[3] memory label\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        Version memory version = set.versions[uintArray3ToString(label)];\\n        require(\\n            version.urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        return version;\\n    }\\n\\n    /**\\n     @dev updates a url of a given version in a given set\\n     @param set The set containing the version of which the url will be updated\\n     @param label The label of the requested version\\n     @param index The index of the url\\n     @param newUrl The new url to be updated to\\n     */\\n    function updateVersionURL(\\n        Set storage set,\\n        uint8[3] memory label,\\n        uint256 index,\\n        string memory newUrl\\n    ) internal {\\n        string memory labelKey = uintArray3ToString(label);\\n        require(\\n            set.versions[labelKey].urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        require(\\n            set.versions[labelKey].urls.length > index,\\n            \\\"#Versions: The url does not exist on that version\\\"\\n        );\\n        set.versions[labelKey].urls[index].url = newUrl;\\n    }\\n\\n    /**\\n     @dev gets all the version labels of a given set\\n     @param set The set containing the versions\\n     @return labels an array of labels as strings\\n    */\\n    function getAllLabels(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return set.labels;\\n    }\\n\\n    /**\\n     @dev gets all the versions of a given set\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getAllVersions(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        return getVersionsFromLabels(set, set.labels);\\n    }\\n\\n    /**\\n     @dev gets the versions of a given array of labels as strings, reverts if no labels are given\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getVersionsFromLabels(\\n        Set storage set,\\n        string[] memory _labels\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        require(_labels.length != 0, \\\"#Versions: No labels provided\\\");\\n        Version[] memory versionArray = new Version[](_labels.length);\\n\\n        for (uint256 i = 0; i < _labels.length; i++) {\\n                versionArray[i] = set.versions[_labels[i]];\\n        }\\n\\n        return versionArray;\\n    }\\n\\n    /**\\n     @dev gets the last added version of a given set, reverts if no versions are in the set\\n     @param set The set containing the versions\\n     @return version the last added version\\n    */\\n    function getLatestVersion(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        require(\\n            set.labels.length != 0,\\n            \\\"#Versions: No versions exist\\\"\\n        );\\n        return set.versions[\\n            set.labels[set.labels.length - 1]\\n        ];\\n    }\\n\\n    /**\\n     @dev A helper function to convert a three length array of numbers into a semantic style verison label\\n     @param label the label as a uint8[3] array\\n     @return label the label as a string\\n    */\\n    function uintArray3ToString (uint8[3] memory label)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(\\n            StringsUpgradeable.toString(label[0]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[1]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[2])\\n        ));\\n    }\\n}\",\"keccak256\":\"0x3275bd2aaf129946c0f658e880172a492b22ddef25d985baea2f03306bf90e03\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000c4e38038062000c4e833981016040819052620000349162000133565b80600060ff16815181106200004d576200004d62000222565b60200260200101516002600060018111156200006d576200006d6200020c565b60ff166002811062000083576200008362000222565b0180546001600160a01b0319166001600160a01b039290921691909117905580600160ff1681518110620000bb57620000bb62000222565b60200260200101516002600180811115620000da57620000da6200020c565b60ff1660028110620000f057620000f062000222565b0180546001600160a01b0319166001600160a01b0392909216919091179055506200024e565b80516001600160a01b03811681146200012e57600080fd5b919050565b600060208083850312156200014757600080fd5b82516001600160401b03808211156200015f57600080fd5b818501915085601f8301126200017457600080fd5b81518181111562000189576200018962000238565b8060051b604051601f19603f83011681018181108582111715620001b157620001b162000238565b604052828152858101935084860182860187018a1015620001d157600080fd5b600095505b83861015620001ff57620001ea8162000116565b855260019590950194938601938601620001d6565b5098975050505050505050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6109f0806200025e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632c9d983e14610046578063845affc814610076578063eb8a4bbf14610089575b600080fd5b610059610054366004610762565b6100aa565b6040516001600160a01b0390911681526020015b60405180910390f35b610059610084366004610749565b61015f565b61009c61009736600461064a565b61017f565b60405190815260200161006d565b600061015660028360ff16600281106100c5576100c561098e565b015460408051602081018790526001600160a01b0390921691016040516020818303038152906040526100f790610967565b30604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b90505b92915050565b6002816002811061016f57600080fd5b01546001600160a01b0316905081565b6000806101a060008460ff166002811061019b5761019b61098e565b015490565b905060006101f460028560ff16600281106101bd576101bd61098e565b015460408051602081018690526001600160a01b0390921691016040516020818303038152906040526101ef90610967565b61038d565b905060ff841661028157806001600160a01b03166313d2de32338760000151886020015189604001518a606001518b608001518c60a001516040518863ffffffff1660e01b815260040161024e97969594939291906107fe565b600060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050505b60ff84166001141561031057806001600160a01b03166313d2de32338760000151886020015189604001518a606001518b608001518c60a001516040518863ffffffff1660e01b81526004016102dd97969594939291906107fe565b600060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050505b6080850151604080519182526001600160a01b038316602083015260ff86168282015251339184917fcfd3e3dbf384b4c0216fab858fcd7df222e7619305782382e905da08f0cb4b589181900360600190a361038560008560ff166002811061037b5761037b61098e565b0180546001019055565b509392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166101595760405162461bcd60e51b8152602060048201526017602482015276115490cc4c4d8dce8818dc99585d194c8819985a5b1959604a1b604482015260640160405180910390fd5b600082601f83011261043c57600080fd5b604051606081018181106001600160401b038211171561045e5761045e6109a4565b60405280836060810186101561047357600080fd5b60005b600381101561049d5761048882610634565b83526020928301929190910190600101610476565b509195945050505050565b600082601f8301126104b957600080fd5b81356001600160401b038111156104d2576104d26109a4565b6104e5601f8201601f1916602001610937565b8181528460208386010111156104fa57600080fd5b816020850160208301376000918101602001919091529392505050565b60006080828403121561052957600080fd5b6105316108ed565b905081356001600160401b038082111561054a57600080fd5b818401915084601f83011261055e57600080fd5b8135602082821115610572576105726109a4565b8160051b610581828201610937565b8381528281019086840183880185018b101561059c57600080fd5b600093505b85841015610614578035878111156105b857600080fd5b88016040818d03601f19018113156105cf57600080fd5b6105d76108ed565b878301358a8111156105e857600080fd5b6105f68f8a838701016104a8565b825250910135868201528352600193909301929184019184016105a1565b5087525061062690508787830161042b565b818601525050505092915050565b803560ff8116811461064557600080fd5b919050565b6000806040838503121561065d57600080fd5b82356001600160401b038082111561067457600080fd5b9084019060c0828703121561068857600080fd5b610690610915565b82358281111561069f57600080fd5b6106ab888286016104a8565b8252506020830135828111156106c057600080fd5b6106cc888286016104a8565b6020830152506040830135828111156106e457600080fd5b6106f0888286016104a8565b60408301525060608301358281111561070857600080fd5b61071488828601610517565b6060830152506080830135608082015260a083013560a082015280945050505061074060208401610634565b90509250929050565b60006020828403121561075b57600080fd5b5035919050565b6000806040838503121561077557600080fd5b8235915061074060208401610634565b8060005b60038110156107ab57815160ff16845260209384019390910190600101610789565b50505050565b6000815180845260005b818110156107d7576020818501810151868301820152016107bb565b818111156107e9576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038816815260e060208083018290526000916108239084018a6107b1565b604084820381860152610836828b6107b1565b9150848203606086015261084a828a6107b1565b915084820360808601526080820188516080845281815180845260a08601915060a08160051b8701019350868301925060005b818110156108be57868503609f19018352835180518787526108a1888801826107b1565b918a0151968a01969096529450928701929187019160010161087d565b505050508389015191506108d484840183610785565b60a08601979097525050505060c0015295945050505050565b604080519081016001600160401b038111828210171561090f5761090f6109a4565b60405290565b60405160c081016001600160401b038111828210171561090f5761090f6109a4565b604051601f8201601f191681016001600160401b038111828210171561095f5761095f6109a4565b604052919050565b80516020808301519190811015610988576000198160200360031b1b821691505b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220137c8e1638373fc896581f0799709bfa0529ea6513213228708bc89c1adac1d964736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80632c9d983e14610046578063845affc814610076578063eb8a4bbf14610089575b600080fd5b610059610054366004610762565b6100aa565b6040516001600160a01b0390911681526020015b60405180910390f35b610059610084366004610749565b61015f565b61009c61009736600461064a565b61017f565b60405190815260200161006d565b600061015660028360ff16600281106100c5576100c561098e565b015460408051602081018790526001600160a01b0390921691016040516020818303038152906040526100f790610967565b30604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b90505b92915050565b6002816002811061016f57600080fd5b01546001600160a01b0316905081565b6000806101a060008460ff166002811061019b5761019b61098e565b015490565b905060006101f460028560ff16600281106101bd576101bd61098e565b015460408051602081018690526001600160a01b0390921691016040516020818303038152906040526101ef90610967565b61038d565b905060ff841661028157806001600160a01b03166313d2de32338760000151886020015189604001518a606001518b608001518c60a001516040518863ffffffff1660e01b815260040161024e97969594939291906107fe565b600060405180830381600087803b15801561026857600080fd5b505af115801561027c573d6000803e3d6000fd5b505050505b60ff84166001141561031057806001600160a01b03166313d2de32338760000151886020015189604001518a606001518b608001518c60a001516040518863ffffffff1660e01b81526004016102dd97969594939291906107fe565b600060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050505b6080850151604080519182526001600160a01b038316602083015260ff86168282015251339184917fcfd3e3dbf384b4c0216fab858fcd7df222e7619305782382e905da08f0cb4b589181900360600190a361038560008560ff166002811061037b5761037b61098e565b0180546001019055565b509392505050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166101595760405162461bcd60e51b8152602060048201526017602482015276115490cc4c4d8dce8818dc99585d194c8819985a5b1959604a1b604482015260640160405180910390fd5b600082601f83011261043c57600080fd5b604051606081018181106001600160401b038211171561045e5761045e6109a4565b60405280836060810186101561047357600080fd5b60005b600381101561049d5761048882610634565b83526020928301929190910190600101610476565b509195945050505050565b600082601f8301126104b957600080fd5b81356001600160401b038111156104d2576104d26109a4565b6104e5601f8201601f1916602001610937565b8181528460208386010111156104fa57600080fd5b816020850160208301376000918101602001919091529392505050565b60006080828403121561052957600080fd5b6105316108ed565b905081356001600160401b038082111561054a57600080fd5b818401915084601f83011261055e57600080fd5b8135602082821115610572576105726109a4565b8160051b610581828201610937565b8381528281019086840183880185018b101561059c57600080fd5b600093505b85841015610614578035878111156105b857600080fd5b88016040818d03601f19018113156105cf57600080fd5b6105d76108ed565b878301358a8111156105e857600080fd5b6105f68f8a838701016104a8565b825250910135868201528352600193909301929184019184016105a1565b5087525061062690508787830161042b565b818601525050505092915050565b803560ff8116811461064557600080fd5b919050565b6000806040838503121561065d57600080fd5b82356001600160401b038082111561067457600080fd5b9084019060c0828703121561068857600080fd5b610690610915565b82358281111561069f57600080fd5b6106ab888286016104a8565b8252506020830135828111156106c057600080fd5b6106cc888286016104a8565b6020830152506040830135828111156106e457600080fd5b6106f0888286016104a8565b60408301525060608301358281111561070857600080fd5b61071488828601610517565b6060830152506080830135608082015260a083013560a082015280945050505061074060208401610634565b90509250929050565b60006020828403121561075b57600080fd5b5035919050565b6000806040838503121561077557600080fd5b8235915061074060208401610634565b8060005b60038110156107ab57815160ff16845260209384019390910190600101610789565b50505050565b6000815180845260005b818110156107d7576020818501810151868301820152016107bb565b818111156107e9576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038816815260e060208083018290526000916108239084018a6107b1565b604084820381860152610836828b6107b1565b9150848203606086015261084a828a6107b1565b915084820360808601526080820188516080845281815180845260a08601915060a08160051b8701019350868301925060005b818110156108be57868503609f19018352835180518787526108a1888801826107b1565b918a0151968a01969096529450928701929187019160010161087d565b505050508389015191506108d484840183610785565b60a08601979097525050505060c0015295945050505050565b604080519081016001600160401b038111828210171561090f5761090f6109a4565b60405290565b60405160c081016001600160401b038111828210171561090f5761090f6109a4565b604051601f8201601f191681016001600160401b038111828210171561095f5761095f6109a4565b604052919050565b80516020808301519190811015610988576000198160200360031b1b821691505b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220137c8e1638373fc896581f0799709bfa0529ea6513213228708bc89c1adac1d964736f6c63430008060033",
  "devdoc": {
    "events": {
      "CreatedEdition(uint256,address,uint256,address,uint8)": {
        "params": {
          "editionId": "ID of newly created edition"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_implementations": "Array of addresse for implementations of SingleEditionMintable like contracts to clone"
        }
      },
      "createEdition((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)": {
        "params": {
          "editionData": "EditionData of the edition contract",
          "implementation": "Implementation of the edition contract"
        }
      },
      "getEditionAtId(uint256,uint8)": {
        "params": {
          "editionId": "id of edition to get contract for"
        },
        "returns": {
          "_0": "SingleEditionMintable Edition NFT contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatedEdition(uint256,address,uint256,address,uint8)": {
        "notice": "Emitted when a edition is created reserving the corresponding token IDs."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes factory with address of implementations logic"
      },
      "createEdition((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)": {
        "notice": "Creates a new edition contract as a factory with a deterministic address"
      },
      "getEditionAtId(uint256,uint8)": {
        "notice": "Get edition given the created ID"
      },
      "implementations(uint256)": {
        "notice": "Address for implementation of SingleEditionMintable to clone"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4563,
        "contract": "contracts/SingleEditionMintableCreator.sol:SingleEditionMintableCreator",
        "label": "atContracts",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Counter)1574_storage)2_storage"
      },
      {
        "astId": 4568,
        "contract": "contracts/SingleEditionMintableCreator.sol:SingleEditionMintableCreator",
        "label": "implementations",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)2_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)2_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_struct(Counter)1574_storage)2_storage": {
        "base": "t_struct(Counter)1574_storage",
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter[2]",
        "numberOfBytes": "64"
      },
      "t_struct(Counter)1574_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1573,
            "contract": "contracts/SingleEditionMintableCreator.sol:SingleEditionMintableCreator",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}