{
  "address": "0xC1Cec8b6f07FF45fe6Fba64A898c43e50694FE0E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencoded",
          "type": "bytes"
        }
      ],
      "name": "base64Encode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenSeed",
          "type": "uint256"
        }
      ],
      "name": "createMetadataEdition",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "createMetadataEdition",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mediaData",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataJSON",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "encodeMetadataJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "numberToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenSeed",
          "type": "uint256"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "label",
          "type": "uint8[3]"
        }
      ],
      "name": "uintArray3ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6c4b35d10652d63434399942c4d98be3c638ddfc6873da7db67aff3f56a080e",
  "receipt": {
    "to": null,
    "from": "0x5f0009F23251fEB0f58c8e3aAb8E096Af16FaECD",
    "contractAddress": "0xC1Cec8b6f07FF45fe6Fba64A898c43e50694FE0E",
    "transactionIndex": 3,
    "gasUsed": "1336058",
    "logsBloom": "0x0000000000000000000000000000000080000000000000000000001000000000000000000000002000000000000000000000800000000000000000000000000000000000000000000000000000000080000000000000000000010000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000c000000000000000000001000000000000000000000000000000100000001000000000000000000000000000000000000000000000000000000000010000100000",
    "blockHash": "0x45c0e24a021270ddeee5ff74cdc79ba570f1dcea811722e4c0eb715ed4e2f3c3",
    "transactionHash": "0xc6c4b35d10652d63434399942c4d98be3c638ddfc6873da7db67aff3f56a080e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 26335796,
        "transactionHash": "0xc6c4b35d10652d63434399942c4d98be3c638ddfc6873da7db67aff3f56a080e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f0009f23251feb0f58c8e3aab8e096af16faecd",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008e66214fbba9de000000000000000000000000000000000000000000000000253eda136c51dc82000000000000000000000000000000000000000000000227b39614f9aa16272b00000000000000000000000000000000000000000000000024b073f21c9632a4000000000000000000000000000000000000000000000227b4247b1af9d1d109",
        "logIndex": 507,
        "blockHash": "0x45c0e24a021270ddeee5ff74cdc79ba570f1dcea811722e4c0eb715ed4e2f3c3"
      }
    ],
    "blockNumber": 26335796,
    "cumulativeGasUsed": "14938177",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "56169438e4bb47f778d0edd9e861ea14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencoded\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSeed\",\"type\":\"uint256\"}],\"name\":\"createMetadataEdition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"createMetadataEdition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mediaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataJSON\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"encodeMetadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSeed\",\"type\":\"uint256\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"name\":\"uintArray3ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Can safely be used for generic base64Encode and numberToString functions\",\"kind\":\"dev\",\"methods\":{\"addressToString(address)\":{\"params\":{\"_address\":\"address to return as a string\"}},\"base64Encode(bytes)\":{\"params\":{\"unencoded\":\"bytes to base64-encode\"}},\"createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"media\":\"The image Url, animation Url and version label of the media to be rendered\",\"name\":\"Name of NFT in metadata\",\"tokenAddress\":\"Address of the NFT\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address,uint256)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"media\":\"The image Url, animation Url and version label of the media to be rendered\",\"name\":\"Name of NFT in metadata\",\"tokenAddress\":\"Address of the NFT\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"mediaData\":\"Data for media to include in json object\",\"name\":\"Name of NFT in metadata\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"encodeMetadataJSON(bytes)\":{\"params\":{\"json\":\"Raw json to base64 and turn into a data-uri\"}},\"numberToString(uint256)\":{\"params\":{\"value\":\"number to return as a string\"}},\"tokenMediaData((string,string,uint8[3]),uint256,address)\":{\"params\":{\"media\":\"urls of image and animation media with version label\"}},\"tokenMediaData((string,string,uint8[3]),uint256,address,uint256)\":{\"params\":{\"media\":\"urls of image and animation media with version label\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressToString(address)\":{\"notice\":\"converts address to string\"},\"createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address)\":{\"notice\":\"Generate edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address,uint256)\":{\"notice\":\"Generate edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"notice\":\"Function to create the metadata json string for the nft edition\"},\"encodeMetadataJSON(bytes)\":{\"notice\":\"Encodes the argument json bytes into base64-data uri format\"},\"numberToString(uint256)\":{\"notice\":\"Proxy to openzeppelin's toString function\"},\"tokenMediaData((string,string,uint8[3]),uint256,address)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"tokenMediaData((string,string,uint8[3]),uint256,address,uint256)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata\"}},\"notice\":\"Shared NFT logic for rendering metadata associated with editions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SharedNFTLogic.sol\":\"SharedNFTLogic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\n\\nstruct MediaData{\\n    string imageUrl;\\n    string animationUrl;\\n    uint8[3] label;\\n}\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// @notice converts address to string\\n    /// @param _address address to return as a string\\n    function addressToString(address _address) public pure returns(string memory) {\\n        bytes20 _bytes = bytes20(_address);\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for(uint i = 0; i < 20; i++) {\\n            _string[2+i*2] = HEX[uint8(_bytes[i] >> 4)];\\n            _string[3+i*2] = HEX[uint8(_bytes[i] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    // Proxy to olta's uintArray3ToString function\\n    function uintArray3ToString (uint8[3] memory label)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return Versions.uintArray3ToString(label);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress,\\n            tokenSeed\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?id=\\\", // if just url \\\"/id\\\" this will work with arweave pathmanifests\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?seed=\\\",\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        \\\"&seed=\\\",\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        media.imageUrl,\\n                        \\\"?seed=\\\", // if just url \\\"/id\\\" this will work with arweave pathmanifests\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        media.animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        \\\"&address=\\\",\\n                        addressToString(tokenAddress),\\n                        \\\"&seed=\\\",\\n                        numberToString(tokenSeed),\\n                        '\\\", \\\"',\\n                        'media_version\\\": \\\"',\\n                        uintArray3ToString(media.label),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x79028cd676d78cc7b4b89b4e809ba73df7d4c296f2b934b09484d071c0c5ba19\",\"license\":\"GPL-3.0\"},\"contracts/Versions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n/*\\n    please note this is work in progress and not ready for production just yet\\n*/\\n\\n/**\\n @title A libary for versioning of NFT content and metadata\\n @dev Provides versioning for nft content and follows the semantic labeling convention.\\n Each version contains an array of content and content hash pairs as well as a version label.\\n Versions can be added and urls can be updated along with getters to retrieve specific versions and history.\\n\\n Include with `using Versions for Versions.set;`\\n @author george baldwin\\n */\\nlibrary Versions {\\n\\n    struct UrlWithHash {\\n        string url;\\n        bytes32 sha256hash;\\n    }\\n\\n    struct Version {\\n        UrlWithHash[] urls;\\n        uint8[3] label;\\n    }\\n\\n    struct Set {\\n        string[] labels;\\n        mapping(string => Version) versions;\\n    }\\n\\n    /**\\n     @dev creates a new version from array of url hashe pairs and a semantic label\\n     @param urls An array of urls with sha-256 hash of the content on that url\\n     @param label a version label in a semantic style\\n     */\\n    function createVersion(\\n        UrlWithHash[] memory urls,\\n        uint8[3] memory label\\n    )\\n        internal\\n        pure\\n        returns (Version memory)\\n    {\\n        Version memory version = Version(urls, label);\\n        return version;\\n    }\\n\\n    /**\\n     @dev adds a version to a given set by pushing the version label to an array\\n        and mapping the version to a string of that label. Will revert if the label already exists.\\n     @param set the set to add the version to\\n     @param version the version that will be stored\\n     */\\n    function addVersion(\\n        Set storage set,\\n        Version memory version\\n    ) internal {\\n\\n        string memory labelKey = uintArray3ToString(version.label);\\n\\n        require(\\n            set.versions[labelKey].urls.length == 0,\\n            \\\"#Versions: A version with that label already exists\\\"\\n        );\\n\\n        // add to labels array\\n        set.labels.push(labelKey);\\n\\n        // store urls and hashes in mapping\\n        for (uint256 i = 0; i < version.urls.length; i++){\\n            set.versions[labelKey].urls.push(version.urls[i]);\\n        }\\n\\n        // store label\\n        set.versions[labelKey].label = version.label;\\n    }\\n\\n    /**\\n     @dev gets a version from a given set. Will revert if the version doesn't exist.\\n     @param set The set to get the version from\\n     @param label The label of the requested version\\n     @return version The version corrosponeding to the label\\n     */\\n    function getVersion(\\n        Set storage set,\\n        uint8[3] memory label\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        Version memory version = set.versions[uintArray3ToString(label)];\\n        require(\\n            version.urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        return version;\\n    }\\n\\n    /**\\n     @dev updates a url of a given version in a given set\\n     @param set The set containing the version of which the url will be updated\\n     @param label The label of the requested version\\n     @param index The index of the url\\n     @param newUrl The new url to be updated to\\n     */\\n    function updateVersionURL(\\n        Set storage set,\\n        uint8[3] memory label,\\n        uint256 index,\\n        string memory newUrl\\n    ) internal {\\n        string memory labelKey = uintArray3ToString(label);\\n        require(\\n            set.versions[labelKey].urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        require(\\n            set.versions[labelKey].urls.length > index,\\n            \\\"#Versions: The url does not exist on that version\\\"\\n        );\\n        set.versions[labelKey].urls[index].url = newUrl;\\n    }\\n\\n    /**\\n     @dev gets all the version labels of a given set\\n     @param set The set containing the versions\\n     @return labels an array of labels as strings\\n    */\\n    function getAllLabels(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return set.labels;\\n    }\\n\\n    /**\\n     @dev gets all the versions of a given set\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getAllVersions(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        return getVersionsFromLabels(set, set.labels);\\n    }\\n\\n    /**\\n     @dev gets the versions of a given array of labels as strings, reverts if no labels are given\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getVersionsFromLabels(\\n        Set storage set,\\n        string[] memory _labels\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        require(_labels.length != 0, \\\"#Versions: No labels provided\\\");\\n        Version[] memory versionArray = new Version[](_labels.length);\\n\\n        for (uint256 i = 0; i < _labels.length; i++) {\\n                versionArray[i] = set.versions[_labels[i]];\\n        }\\n\\n        return versionArray;\\n    }\\n\\n    /**\\n     @dev gets the last added version of a given set, reverts if no versions are in the set\\n     @param set The set containing the versions\\n     @return version the last added version\\n    */\\n    function getLatestVersion(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        require(\\n            set.labels.length != 0,\\n            \\\"#Versions: No versions exist\\\"\\n        );\\n        return set.versions[\\n            set.labels[set.labels.length - 1]\\n        ];\\n    }\\n\\n    /**\\n     @dev A helper function to convert a three length array of numbers into a semantic style verison label\\n     @param label the label as a uint8[3] array\\n     @return label the label as a string\\n    */\\n    function uintArray3ToString (uint8[3] memory label)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(\\n            StringsUpgradeable.toString(label[0]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[1]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[2])\\n        ));\\n    }\\n}\",\"keccak256\":\"0x3275bd2aaf129946c0f658e880172a492b22ddef25d985baea2f03306bf90e03\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611734806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063612d071711610066578063612d071714610118578063a86e8f4e1461012b578063d01fde8c1461013e578063d5fb1b1914610151578063eaaf0a461461016457600080fd5b8063170dc660146100a35780634309a539146100cc5780634faa1cca146100df57806358464f30146100f25780635e57966d14610105575b600080fd5b6100b66100b1366004610e4d565b610177565b6040516100c39190611592565b60405180910390f35b6100b66100da366004610ce4565b610188565b6100b66100ed366004610def565b6101c2565b6100b6610100366004610ba1565b6102dd565b6100b6610113366004610b22565b610359565b6100b6610126366004610b3d565b610529565b6100b6610139366004610d99565b610534565b6100b661014c366004610b59565b61063a565b6100b661015f366004610b59565b61066b565b6100b6610172366004610c3a565b610676565b6060610182826106ae565b92915050565b60606000610198878786866101c2565b905060006101a98a8a848a8a6102dd565b90506101b48161063a565b9a9950505050505050505050565b8351516020850151516060911580159115159082906101de5750805b156102495786516101ee85610177565b88602001516101fc89610177565b61020589610359565b61020e89610177565b61021b8d60400151610529565b6040516020016102319796959493929190611161565b604051602081830303815290604052925050506102d5565b811561027957865161025a85610177565b6102678960400151610529565b604051602001610231939291906110c1565b80156102c057866020015161028d87610177565b61029687610359565b61029f87610177565b6102ac8b60400151610529565b6040516020016102319594939291906113d7565b60405180602001604052806000815250925050505b949350505050565b6060808215610311576102ef83610177565b6040516020016102ff91906113ae565b60405160208183030381529060405290505b8661031b85610177565b82888861032789610177565b8c60405160200161033e9796959493929190611259565b60405160208183030381529060405291505095945050505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201528151602a808252606082810190945284841b9291600091602082018180368337019050509050600360fc1b816000815181106103bd576103bd611692565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106103ec576103ec611692565b60200101906001600160f81b031916908160001a90535060005b60148110156105205782600485836014811061042457610424611692565b1a60f81b6001600160f81b031916901c60f81c60ff168151811061044a5761044a611692565b01602001516001600160f81b031916826104658360026115d1565b6104709060026115a5565b8151811061048057610480611692565b60200101906001600160f81b031916908160001a905350828482601481106104aa576104aa611692565b825191901a600f169081106104c1576104c1611692565b01602001516001600160f81b031916826104dc8360026115d1565b6104e79060036115a5565b815181106104f7576104f7611692565b60200101906001600160f81b031916908160001a9053508061051881611637565b915050610406565b50949350505050565b6060610182826107ab565b8251516020840151516060911580159115159082906105505750805b156105b157855161056086610177565b876020015161056e88610177565b61057788610359565b6105848b60400151610529565b60405160200161059996959493929190610fa6565b60405160208183030381529060405292505050610633565b81156105e15785516105c286610177565b6105cf8860400151610529565b60405160200161059993929190610f08565b801561061e5785602001516105f586610177565b6105fe86610359565b61060b8960400151610529565b60405160200161059994939291906114c1565b60405180602001604052806000815250925050505b9392505050565b60606106458261066b565b6040516020016106559190611369565b6040516020818303038152906040529050919050565b6060610182826107e9565b60606000610685868685610534565b9050600061069689898489896102dd565b90506106a18161063a565b9998505050505050505050565b6060816106d25750506040805180820190915260018152600360fc1b602082015290565b8160005b81156106fc57806106e681611637565b91506106f59050600a836115bd565b91506106d6565b6000816001600160401b03811115610716576107166116a8565b6040519080825280601f01601f191660200182016040528015610740576020820181803683370190505b5090505b84156102d5576107556001836115f0565b9150610762600a86611652565b61076d9060306115a5565b60f81b81838151811061078257610782611692565b60200101906001600160f81b031916908160001a9053506107a4600a866115bd565b9450610744565b60606107c18260005b602002015160ff166106ae565b6107cc8360016107b4565b6107d78460026107b4565b60405160200161065593929190610eae565b606081516000141561080957505060408051602081019091526000815290565b60006040518060600160405280604081526020016116bf604091399050600060038451600261083891906115a5565b61084291906115bd565b61084d9060046115d1565b9050600061085c8260206115a5565b6001600160401b03811115610873576108736116a8565b6040519080825280601f01601f19166020018201604052801561089d576020820181803683370190505b509050818152600183018586518101602084015b8183101561090b5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b938201939093526004016108b1565b600389510660018114610925576002811461093657610942565b613d3d60f01b600119830152610942565b603d60f81b6000198301525b509398975050505050505050565b60006001600160401b038084111561096a5761096a6116a8565b604051601f8501601f19908116603f01168101908282118183101715610992576109926116a8565b816040528093508581528686860111156109ab57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146109dc57600080fd5b919050565b600082601f8301126109f257600080fd5b604051606081018181106001600160401b0382111715610a1457610a146116a8565b604052808360608101861015610a2957600080fd5b6000805b6003811015610a5b57823560ff81168114610a46578283fd5b84526020938401939290920191600101610a2d565b50929695505050505050565b600082601f830112610a7857600080fd5b61063383833560208501610950565b600060a08284031215610a9957600080fd5b604051606081016001600160401b038282108183111715610abc57610abc6116a8565b816040528293508435915080821115610ad457600080fd5b610ae086838701610a67565b83526020850135915080821115610af657600080fd5b50610b0385828601610a67565b602083015250610b1684604085016109e1565b60408201525092915050565b600060208284031215610b3457600080fd5b610633826109c5565b600060608284031215610b4f57600080fd5b61063383836109e1565b600060208284031215610b6b57600080fd5b81356001600160401b03811115610b8157600080fd5b8201601f81018413610b9257600080fd5b6102d584823560208401610950565b600080600080600060a08688031215610bb957600080fd5b85356001600160401b0380821115610bd057600080fd5b610bdc89838a01610a67565b96506020880135915080821115610bf257600080fd5b610bfe89838a01610a67565b95506040880135915080821115610c1457600080fd5b50610c2188828901610a67565b9598949750949560608101359550608001359392505050565b60008060008060008060c08789031215610c5357600080fd5b86356001600160401b0380821115610c6a57600080fd5b610c768a838b01610a67565b97506020890135915080821115610c8c57600080fd5b610c988a838b01610a67565b96506040890135915080821115610cae57600080fd5b50610cbb89828a01610a87565b9450506060870135925060808701359150610cd860a088016109c5565b90509295509295509295565b600080600080600080600060e0888a031215610cff57600080fd5b87356001600160401b0380821115610d1657600080fd5b610d228b838c01610a67565b985060208a0135915080821115610d3857600080fd5b610d448b838c01610a67565b975060408a0135915080821115610d5a57600080fd5b50610d678a828b01610a87565b9550506060880135935060808801359250610d8460a089016109c5565b915060c0880135905092959891949750929550565b600080600060608486031215610dae57600080fd5b83356001600160401b03811115610dc457600080fd5b610dd086828701610a87565b93505060208401359150610de6604085016109c5565b90509250925092565b60008060008060808587031215610e0557600080fd5b84356001600160401b03811115610e1b57600080fd5b610e2787828801610a87565b94505060208501359250610e3d604086016109c5565b9396929550929360600135925050565b600060208284031215610e5f57600080fd5b5035919050565b60008151808452610e7e816020860160208601611607565b601f01601f19169290920160200192915050565b60008151610ea4818560208601611607565b9290920192915050565b60008451610ec0818460208901611607565b8083019050601760f91b8082528551610ee0816001850160208a01611607565b60019201918201528351610efb816002840160208801611607565b0160020195945050505050565b6834b6b0b3b2911d101160b91b81528351600090610f2d816009850160208901611607565b633f69643d60e01b6009918401918201528451610f5181600d840160208901611607565b631116101160e11b600d929091019182018190527036b2b234b0afbb32b939b4b7b7111d101160791b60118301528451610f92816022850160208901611607565b602292019182015260260195945050505050565b6834b6b0b3b2911d101160b91b81528651600090610fcb816009850160208c01611607565b8083019050633f69643d60e01b8060098301528851610ff181600d850160208d01611607565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600d93909101928301528751611027816022850160208c01611607565b60229201918201528551611042816026840160208a01611607565b6826616464726573733d60b81b60269290910191820152845161106c81602f840160208901611607565b6101b46110b16110ab61108e602f85870101631116101160e11b815260040190565b7036b2b234b0afbb32b939b4b7b7111d101160791b815260110190565b87610e92565b631116101160e11b815260040190565b6834b6b0b3b2911d101160b91b815283516000906110e6816009850160208901611607565b653f736565643d60d01b600991840191820152845161110c81600f840160208901611607565b631116101160e11b600f929091019182018190527036b2b234b0afbb32b939b4b7b7111d101160791b6013830152845161114d816024850160208901611607565b602492019182015260280195945050505050565b6834b6b0b3b2911d101160b91b81528751600090611186816009850160208d01611607565b653f736565643d60d01b60099184019182015288516111ac81600f840160208d01611607565b741116101130b734b6b0ba34b7b72fbab936111d101160591b600f929091019182015287516111e2816024840160208c01611607565b633f69643d60e01b602492909101918201528651611207816028840160208b01611607565b6826616464726573733d60b81b602892909101918201526101b46110b161125361108e8261124d61123b603188018d610e92565b6526736565643d60d01b815260060190565b8a610e92565b86610e92565b693d913730b6b2911d101160b11b8152875160009061127f81600a850160208d01611607565b600160fd1b600a9184019182015288516112a081600b840160208d01611607565b88519101906112b681600b840160208c01611607565b631116101160e11b600b929091019182018190526e3232b9b1b934b83a34b7b7111d101160891b600f83015287516112f581601e850160208c01611607565b601e9201918201526101b461135a61125361134361133d611319602287018c610e92565b770383937b832b93a34b2b9911d103d91373ab6b132b9111d160451b815260180190565b89610e92565b6a1610113730b6b2911d101160a91b8152600b0190565b62227d7d60e81b815260030190565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516113a181601d850160208701611607565b91909101601d0192915050565b602f60f81b8152600082516113ca816001850160208701611607565b9190910160010192915050565b7030b734b6b0ba34b7b72fbab936111d101160791b81528551600090611404816011850160208b01611607565b633f69643d60e01b6011918401918201528651611428816015840160208b01611607565b6826616464726573733d60b81b60159290910191820152855161145281601e840160208a01611607565b6526736565643d60d01b601e92909101918201528451611479816024840160208901611607565b631116101160e11b602492909101918201527036b2b234b0afbb32b939b4b7b7111d101160791b60288201526114b56110b16039830186610e92565b98975050505050505050565b7030b734b6b0ba34b7b72fbab936111d101160791b815284516000906114ee816011850160208a01611607565b633f69643d60e01b6011918401918201528551611512816015840160208a01611607565b6826616464726573733d60b81b60159290910191820152845161153c81601e840160208901611607565b631116101160e11b601e929091019182018190527036b2b234b0afbb32b939b4b7b7111d101160791b6022830152845161157d816033850160208901611607565b60339201918201526037019695505050505050565b6020815260006106336020830184610e66565b600082198211156115b8576115b8611666565b500190565b6000826115cc576115cc61167c565b500490565b60008160001904831182151516156115eb576115eb611666565b500290565b60008282101561160257611602611666565b500390565b60005b8381101561162257818101518382015260200161160a565b83811115611631576000848401525b50505050565b600060001982141561164b5761164b611666565b5060010190565b6000826116615761166161167c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220ca54e7f86d4cf240be7e28cade138463cef6064c1607318da136ad331d75d90764736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Can safely be used for generic base64Encode and numberToString functions",
    "kind": "dev",
    "methods": {
      "addressToString(address)": {
        "params": {
          "_address": "address to return as a string"
        }
      },
      "base64Encode(bytes)": {
        "params": {
          "unencoded": "bytes to base64-encode"
        }
      },
      "createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "media": "The image Url, animation Url and version label of the media to be rendered",
          "name": "Name of NFT in metadata",
          "tokenAddress": "Address of the NFT",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address,uint256)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "media": "The image Url, animation Url and version label of the media to be rendered",
          "name": "Name of NFT in metadata",
          "tokenAddress": "Address of the NFT",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "mediaData": "Data for media to include in json object",
          "name": "Name of NFT in metadata",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "encodeMetadataJSON(bytes)": {
        "params": {
          "json": "Raw json to base64 and turn into a data-uri"
        }
      },
      "numberToString(uint256)": {
        "params": {
          "value": "number to return as a string"
        }
      },
      "tokenMediaData((string,string,uint8[3]),uint256,address)": {
        "params": {
          "media": "urls of image and animation media with version label"
        }
      },
      "tokenMediaData((string,string,uint8[3]),uint256,address,uint256)": {
        "params": {
          "media": "urls of image and animation media with version label"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressToString(address)": {
        "notice": "converts address to string"
      },
      "createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address)": {
        "notice": "Generate edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "createMetadataEdition(string,string,(string,string,uint8[3]),uint256,uint256,address,uint256)": {
        "notice": "Generate edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "notice": "Function to create the metadata json string for the nft edition"
      },
      "encodeMetadataJSON(bytes)": {
        "notice": "Encodes the argument json bytes into base64-data uri format"
      },
      "numberToString(uint256)": {
        "notice": "Proxy to openzeppelin's toString function"
      },
      "tokenMediaData((string,string,uint8[3]),uint256,address)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "tokenMediaData((string,string,uint8[3]),uint256,address,uint256)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata"
      }
    },
    "notice": "Shared NFT logic for rendering metadata associated with editions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}