{
  "address": "0x68fB534dEb2f592C3025a9Ad448A16A3F9A41b58",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract SharedNFTLogic",
          "name": "_sharedNFTLogic",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovedMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "EditionSizeFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRecipientAddress",
          "type": "address"
        }
      ],
      "name": "RoyaltyFundsRecipientChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8[3]",
          "name": "label",
          "type": "uint8[3]"
        }
      ],
      "name": "VersionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8[3]",
          "name": "label",
          "type": "uint8[3]"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "VersionURLUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "url",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "sha256hash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Versions.UrlHashPair[]",
              "name": "urls",
              "type": "tuple[]"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct Versions.Version",
          "name": "_version",
          "type": "tuple"
        }
      ],
      "name": "addVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "editionSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeEditionSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "label",
          "type": "uint8[3]"
        }
      ],
      "name": "getURIsOfVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersionHistory",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "url",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "sha256hash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Versions.UrlHashPair[]",
              "name": "urls",
              "type": "tuple[]"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct Versions.Version[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "url",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "sha256hash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Versions.UrlHashPair[]",
              "name": "urls",
              "type": "tuple[]"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct Versions.Version",
          "name": "_version",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_editionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBPS",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "seed",
              "type": "uint256"
            }
          ],
          "internalType": "struct MintData[]",
          "name": "recipients",
          "type": "tuple[]"
        }
      ],
      "name": "mintEditions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyBPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seedOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seedsUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setApprovedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newRecipientAddress",
          "type": "address"
        }
      ],
      "name": "setRoyaltyFundsRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8[3]",
          "name": "label",
          "type": "uint8[3]"
        }
      ],
      "name": "tokenURIOfVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "_label",
          "type": "uint8[3]"
        },
        {
          "internalType": "uint8",
          "name": "_urlKey",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_url",
          "type": "string"
        }
      ],
      "name": "updateVersionURL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf848772cd41e767fdaa5c903f8e9026fc88aa6fe31d36efa6885eecfc552cfc3",
  "receipt": {
    "to": null,
    "from": "0x5f0009F23251fEB0f58c8e3aAb8E096Af16FaECD",
    "contractAddress": "0x68fB534dEb2f592C3025a9Ad448A16A3F9A41b58",
    "transactionIndex": 5,
    "gasUsed": "3774923",
    "logsBloom": "0x0000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000080000000000000000000010000000000400000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000008000000000000000000020000000000000000000000000000000000000000000000000000000000000c000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000000000000000000000000000000010000100000",
    "blockHash": "0xdf6882d7b3d80b981adc133059f611bb9bb8b4b2abd7bed91b61e6bbea520b49",
    "transactionHash": "0xf848772cd41e767fdaa5c903f8e9026fc88aa6fe31d36efa6885eecfc552cfc3",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27029144,
        "transactionHash": "0xf848772cd41e767fdaa5c903f8e9026fc88aa6fe31d36efa6885eecfc552cfc3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f0009f23251feb0f58c8e3aab8e096af16faecd",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001d32878369c49e00000000000000000000000000000000000000000000000001c463c7d2ec915c9000000000000000000000000000000000000000000001d094f650ed0616cb33b0000000000000000000000000000000000000000000000001a731404f82ccbe9000000000000000000000000000000000000000000001d09513837489808fd1b",
        "logIndex": 16,
        "blockHash": "0xdf6882d7b3d80b981adc133059f611bb9bb8b4b2abd7bed91b61e6bbea520b49"
      }
    ],
    "blockNumber": 27029144,
    "cumulativeGasUsed": "5078027",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2027aad42ea8eed8050a93919e5ad0849a7b144b"
  ],
  "solcInputHash": "d06f5f4b79ec3b175bd8784a69dabb71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract SharedNFTLogic\",\"name\":\"_sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"EditionSizeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipientAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyFundsRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"name\":\"VersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"VersionURLUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"sha256hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Versions.UrlHashPair[]\",\"name\":\"urls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct Versions.Version\",\"name\":\"_version\",\"type\":\"tuple\"}],\"name\":\"addVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"editionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeEditionSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"name\":\"getURIsOfVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionHistory\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"sha256hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Versions.UrlHashPair[]\",\"name\":\"urls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct Versions.Version[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"sha256hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Versions.UrlHashPair[]\",\"name\":\"urls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct Versions.Version\",\"name\":\"_version\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBPS\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"internalType\":\"struct MintData[]\",\"name\":\"recipients\",\"type\":\"tuple[]\"}],\"name\":\"mintEditions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seedOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seedsUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setApprovedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newRecipientAddress\",\"type\":\"address\"}],\"name\":\"setRoyaltyFundsRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"name\":\"tokenURIOfVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"_label\",\"type\":\"uint8[3]\"},{\"internalType\":\"uint8\",\"name\":\"_urlKey\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"updateVersionURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"iain nash Repository: https://github.com/ourzora/nft-editions\",\"details\":\"This allows creators to mint a unique serial edition of the same media within a custom contract\",\"events\":{\"ApprovedMinter(address,address,bool)\":{\"params\":{\"approved\":\"a boolean indicating the approval status\",\"minter\":\"the address of the approved minter\",\"owner\":\"the address of the owner of the project\"}},\"VersionAdded(uint8[3])\":{\"params\":{\"label\":\"the semantic version label added\"}},\"VersionURLUpdated(uint8[3],uint8,string)\":{\"params\":{\"index\":\"the url index 0 = image, 1 = animation\",\"label\":\"the semantic version label that the url is being updated\",\"url\":\"the url to be updated to\"}}},\"kind\":\"dev\",\"methods\":{\"addVersion(((string,bytes32)[],uint8[3]))\":{\"details\":\"Adds new version of the media updating the urls rendered in the metadata. The order added determins order stored, the label has no effect.\",\"params\":{\"_version\":\"The version to be added consisting of urls, hashes and a label\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"burns token id if owner or approved owner\",\"params\":{\"tokenId\":\"Token ID to burn\"}},\"finalizeEditionSize()\":{\"details\":\"if edition size was set to zero on initialization this allows the owner of the contract to set the edition size to the total supply\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getURIs()\":{\"details\":\"Get URIs for project, will retrieve URIs from the last added version\",\"returns\":{\"_0\":\"imageUrl The url of the image\",\"_1\":\"imageHash  A sha-256 hash of the content on the imageUrl, will be zero address if url blank\",\"_2\":\"animationUrl The url of the animation\",\"_3\":\"animationHash A sha-256 hash of the content on the animationUrl, will be zero address if url blank\"}},\"getURIsOfVersion(uint8[3])\":{\"details\":\"Get URIs for edition NFT of a version Will get URIs from the last version added\",\"params\":{\"label\":\"The label of the version\"},\"returns\":{\"_0\":\"imageUrl\",\"_1\":\"imageHash\",\"_2\":\"animationUrl\",\"_3\":\"animationHash\"}},\"initialize(address,string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256)\":{\"details\":\"Function to create a new project. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the project. This can be re-assigned or updated later\",\"params\":{\"_description\":\"Description of project, used in the description field of the NFT\",\"_editionSize\":\"Number of editions that can be minted in total. If 0, unlimited editions can be minted.\",\"_name\":\"Name of project, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\",\"_owner\":\"User that owns and can mint the project, gets royalty and sales payouts and can update the base url if needed.\",\"_royaltyBPS\":\"BPS of the royalty set on the contract. Can be 0 for no royalty.\",\"_symbol\":\"Symbol of the project\",\"_version\":\"Version of the media consisting of urls and hashes of animation and image content\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintEdition(address,uint256)\":{\"details\":\"This mints one edition to the given address by an allowed minter on the edition instance.\",\"params\":{\"seed\":\"number of the chosen seed\",\"to\":\"address to send the newly minted edition to\"}},\"mintEditions((address,uint256)[])\":{\"details\":\"This mints multiple editions to the given list of addresses.\",\"params\":{\"recipients\":\"list of addresses and seeds to send the newly minted editions to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"numberCanMint()\":{\"details\":\"returns the number of editions allowed to mint (max_uint256 when open edition)\",\"returns\":{\"_0\":\"allowedToMint the number of editions allowed to mint\"}},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchase(uint256)\":{\"details\":\"This allows the user to purchase an edition at the given price in the contract.\",\"params\":{\"seed\":\"the chosen seed number\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Get royalty information for token\",\"params\":{\"_salePrice\":\"Sale price for the token\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setApprovedMinter(address,bool)\":{\"details\":\"Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given project id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.\",\"params\":{\"allowed\":\"boolean if that address is allowed to mint\",\"minter\":\"address to set approved minting status for\"}},\"setRoyaltyFundsRecipient(address)\":{\"params\":{\"newRecipientAddress\":\"the new address where royalties will be sent\"}},\"setSalePrice(uint256)\":{\"details\":\"This sets a simple ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.\",\"params\":{\"_salePrice\":\"if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale.\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Get URI for given token id, will retrieve URIs from the last added version\",\"params\":{\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"metadata base64-encoded json metadata object\"}},\"tokenURIOfVersion(uint256,uint8[3])\":{\"details\":\"Get URI for given token id of given version\",\"params\":{\"label\":\"the label of the version\",\"tokenId\":\"token id to get uri for\"},\"returns\":{\"_0\":\"metadata base64-encoded json metadata object\"}},\"totalSupply()\":{\"details\":\"returns the number of minted tokens within the edition\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateVersionURL(uint8[3],uint8,string)\":{\"details\":\"Updates a url of specified version by the owner of the project. Only URLs can be updated (data-uris are supported), hashes cannot be updated.\",\"params\":{\"_label\":\"The label of the specified version\",\"_url\":\"The url to be updated to\",\"_urlKey\":\"The index of the url to update 0=animation, 1=image\"}},\"withdraw()\":{\"details\":\"This withdraws ETH from the contract to the contract owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeEditionSize()\":{\"notice\":\"allows the creator to finalise the edition size to the total minted\"},\"owner()\":{\"notice\":\"Simple override for owner interface.\"},\"setRoyaltyFundsRecipient(address)\":{\"notice\":\"sets a different royalty funds recipient\"}},\"notice\":\"This is a smart contract for handling dynamic contract minting. This is a fork of Zora NFT Editions changes: - Media urls are versioned allowing for updatable content preserving history - The NFT contract address is included in edition url query for easyier access to query the graph from within the NFT - SupportsInterface function includes project implementation interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Projects/Seeded.sol\":\"SeededProject\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x70994ca77f6dce93193d744ed99add51b57aef3e56d42b90889f6a2b1444b6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa22a7520aa91e00d994a8fc0c6e17df8331c3224d87a9079ae8b1a97644cbbbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/Projects/ISeeded.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nstruct MintData {\\n  address to;\\n  uint256 seed;\\n}\\n\\ninterface ISeededProject {\\n  function mintEdition(address to, uint256 seed) external returns (uint256);\\n  function mintEditions(MintData[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x2c2897e4a8b03166c2bf40beb6116fdbf069e09b7505a912e0c45ff83b58aae8\",\"license\":\"GPL-3.0\"},\"contracts/Projects/Seeded.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {SharedNFTLogic, MediaData} from \\\"../SharedNFTLogic.sol\\\";\\nimport {Versions} from \\\"../Versions.sol\\\";\\nimport {ISeededProject, MintData} from \\\"./ISeeded.sol\\\";\\n\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    This is a fork of Zora NFT Editions\\n    changes:\\n        - Media urls are versioned allowing for updatable content preserving history\\n        - The NFT contract address is included in edition url query for easyier access to query the graph from within the NFT\\n        - SupportsInterface function includes project implementation interface\\n\\n    @dev This allows creators to mint a unique serial edition of the same media within a custom contract\\n    @author iain nash\\n    Repository: https://github.com/ourzora/nft-editions\\n*/\\ncontract SeededProject is\\n    ERC721Upgradeable,\\n    ISeededProject,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using Versions for Versions.Set;\\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n\\n    /**\\n     @param label the semantic version label that the url is being updated\\n     @param index the url index 0 = image, 1 = animation\\n     @param url the url to be updated to\\n    */\\n    event VersionURLUpdated(uint8[3] label, uint8 index, string url);\\n\\n    /**\\n     @param label the semantic version label added\\n    */\\n    event VersionAdded(uint8[3] label);\\n\\n    /**\\n     @param owner the address of the owner of the project\\n     @param minter the address of the approved minter\\n     @param approved a boolean indicating the approval status\\n    */\\n    event ApprovedMinter(address indexed owner, address indexed minter, bool approved);\\n\\n    event RoyaltyFundsRecipientChanged(address newRecipientAddress);\\n    event EditionSizeFinalized(uint256 editionSize);\\n\\n    // metadata\\n    string public description;\\n\\n    // Media Urls\\n    enum URLS  {\\n        Image,\\n        Animation,\\n        PatchNotes\\n    }\\n    // Versions of Media Urls\\n    Versions.Set private versions;\\n\\n    // Total size of edition that can be minted\\n    uint256 public editionSize;\\n    // Current token id minted\\n    CountersUpgradeable.Counter private atEditionId;\\n    // Royalty amount in bps\\n    uint256 public royaltyBPS;\\n    // Addresses allowed to mint editions\\n    mapping(address => bool) allowedMinters;\\n\\n    // Mapping from seed to bool\\n    mapping(uint256 => bool) public seedsUsed;\\n    // Mapping from tokenId to seed\\n    mapping(uint256 => uint256) public seedOfTokens;\\n\\n    // Price for sale\\n    uint256 public salePrice;\\n\\n    // NFT rendering logic contract\\n    SharedNFTLogic private immutable sharedNFTLogic;\\n\\n    address payable royaltyFundsRecipient;\\n\\n    // Global constructor for factory\\n    constructor(SharedNFTLogic _sharedNFTLogic) {\\n        sharedNFTLogic = _sharedNFTLogic;\\n    }\\n\\n    /**\\n      @param _owner User that owns and can mint the project, gets royalty and sales payouts and can update the base url if needed.\\n      @param _name Name of project, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the project\\n      @param _description Description of project, used in the description field of the NFT\\n      @param _version Version of the media consisting of urls and hashes of animation and image content\\n      @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @dev Function to create a new project. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the project.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address payable _owner,\\n        // TODO: could add royalties recipient to reduce transactions needed\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        Versions.Version memory _version,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        // Set ownership to original sender of contract call\\n        transferOwnership(_owner);\\n        description = _description;\\n        editionSize = _editionSize;\\n        royaltyBPS = _royaltyBPS;\\n        // Set edition id start to be 1 not 0\\n        atEditionId.increment();\\n\\n        // set default royalty fund recipient\\n        royaltyFundsRecipient = _owner;\\n\\n        // Add first version\\n        _addVersion(_version);\\n    }\\n\\n\\n    /// @dev returns the number of minted tokens within the edition\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply();\\n    }\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through ISeededProject interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase an edition\\n           at the given price in the contract.\\n      @param seed the chosen seed number\\n     */\\n    function purchase(uint256 seed) external payable returns (uint256) {\\n        require(salePrice > 0, \\\"Not for sale\\\");\\n        require(msg.value == salePrice, \\\"Wrong price\\\");\\n        MintData[] memory toMint = new MintData[](1);\\n        toMint[0] = MintData(msg.sender, seed);\\n        emit EditionSold(salePrice, msg.sender);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) external onlyOwner {\\n        salePrice = _salePrice;\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        // No need for gas limit to trusted address.\\n        AddressUpgradeable.sendValue(payable(owner()), address(this).balance);\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (owner() == msg.sender) {\\n            return true;\\n        }\\n        if (allowedMinters[address(0x0)]) {\\n            return true;\\n        }\\n        return allowedMinters[msg.sender];\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @param seed number of the chosen seed\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to, uint256 seed) external override returns (uint256) {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        MintData[] memory toMint = new MintData[](1);\\n        toMint[0] = MintData(to, seed);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param recipients list of addresses and seeds to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(MintData[] memory recipients)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        return _mintEditions(recipients);\\n    }\\n\\n    /**\\n      @notice allows the creator to finalise the edition size to the total minted\\n      @dev if edition size was set to zero on initialization this allows the owner of the contract\\n      to set the edition size to the total supply\\n    */\\n    function finalizeEditionSize() external onlyOwner {\\n        require(editionSize == 0, \\\"Must be open edition\\\");\\n\\n        editionSize = _totalSupply();\\n\\n        emit EditionSizeFinalized(editionSize);\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, ISeededProject)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given project id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\n        allowedMinters[minter] = allowed;\\n        emit ApprovedMinter(_msgSender(), minter, allowed);\\n    }\\n\\n    /**\\n      @notice sets a different royalty funds recipient\\n      @param newRecipientAddress the new address where royalties will be sent\\n     */\\n    function setRoyaltyFundsRecipient(address payable newRecipientAddress)\\n        external\\n        onlyOwner {\\n        royaltyFundsRecipient = newRecipientAddress;\\n        emit RoyaltyFundsRecipientChanged(newRecipientAddress);\\n    }\\n\\n\\n    /**\\n      @dev Updates a url of specified version by the owner of the project.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n      @param _label The label of the specified version\\n      @param _urlKey The index of the url to update 0=animation, 1=image\\n      @param _url The url to be updated to\\n     */\\n    function updateVersionURL(\\n        uint8[3] memory _label,\\n        uint8 _urlKey,\\n        string memory _url\\n    ) public onlyOwner {\\n        versions.updateVersionURL(_label, _urlKey, _url);\\n        emit VersionURLUpdated(_label, _urlKey, _url);\\n    }\\n\\n        /**\\n      @dev Adds new version of the media updating the urls rendered in the metadata.\\n           The order added determins order stored, the label has no effect.\\n      @param _version The version to be added consisting of urls, hashes and a label\\n     */\\n    function addVersion(\\n        Versions.Version memory _version\\n    ) public onlyOwner {\\n        _addVersion(_version);\\n    }\\n\\n    function _addVersion(\\n        Versions.Version memory _version\\n    ) internal {\\n        versions.addVersion(_version);\\n\\n        // ensure the dynamic array has a length of three\\n        if(_version.urls.length < 3){\\n            string memory labelKey = sharedNFTLogic.uintArray3ToString(_version.label);\\n            for (uint256 i = _version.urls.length; i < 3; i++){\\n                // add an empty urlHashPair\\n                versions.versions[labelKey].urls.push();\\n            }\\n        }\\n\\n        emit VersionAdded(_version.label);\\n    }\\n\\n    function getVersionHistory()\\n        public\\n        view\\n        returns (Versions.Version[] memory)\\n    {\\n        return versions.getAllVersions();\\n    }\\n\\n    /**\\n     @dev returns the number of editions allowed to mint (max_uint256 when open edition)\\n     @return allowedToMint the number of editions allowed to mint\\n    */\\n    function numberCanMint() public view override returns (uint256) {\\n        // Return max int if open edition\\n        if (editionSize == 0) {\\n            return type(uint256).max;\\n        }\\n        // atEditionId is one-indexed hence the need to remove one here\\n        return editionSize + 1 - atEditionId.current();\\n    }\\n\\n    /**\\n        @dev burns token id if owner or approved owner\\n        @param tokenId Token ID to burn\\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n        @dev checks if seed is in valid range, between 1 and editionSize\\n        @param seed uint256 of the seed\\n        @return isInRange boolean representing if the seed is in the valid range\\n    */\\n    function _isSeedInRange(uint256 seed) private view returns (bool) {\\n        return ((seed > 0) && (seed <= editionSize));\\n    }\\n\\n    /**\\n        @dev internal function that allocates seed number to nft id\\n        @param tokenId Token ID for the seed to be allocated to\\n        @param seed Seed to be used\\n    */\\n    function _useSeed(uint256 tokenId, uint256 seed) internal {\\n        // check if seed has been used\\n        require(seedsUsed[seed] == false, \\\"Seed already used\\\");\\n        // check if seed is out of range\\n        require(_isSeedInRange(seed), \\\"Seed out of range\\\");\\n\\n        // allocate seed to id\\n        seedsUsed[seed] = true;\\n        seedOfTokens[tokenId] = seed;\\n    }\\n\\n    /**\\n      @dev Private function to mint als without any access checks.\\n           Called by the public edition minting functions.\\n           allocates requested seeds\\n     */\\n    function _mintEditions(MintData[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 startAt = atEditionId.current();\\n        uint256 endAt = startAt + recipients.length - 1;\\n        require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\n\\n        while (atEditionId.current() <= endAt) {\\n            _useSeed(\\n                atEditionId.current(),\\n                recipients[atEditionId.current() - startAt].seed\\n            );\\n\\n            _mint(\\n                recipients[atEditionId.current() - startAt].to,\\n                atEditionId.current()\\n            );\\n            atEditionId.increment();\\n        }\\n        return atEditionId.current();\\n    }\\n\\n    function _totalSupply() internal view returns (uint256) {\\n        return atEditionId.current() - 1;\\n    }\\n\\n    /**\\n      @dev Get URIs for project, will retrieve URIs from the last added version\\n      @return imageUrl The url of the image\\n      @return imageHash  A sha-256 hash of the content on the imageUrl, will be zero address if url blank\\n      @return animationUrl The url of the animation\\n      @return animationHash A sha-256 hash of the content on the animationUrl, will be zero address if url blank\\n     */\\n    function getURIs()\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        Versions.Version memory latest = versions.getLatestVersion();\\n        return (\\n            latest.urls[uint8(URLS.Image)].url,\\n            latest.urls[uint8(URLS.Image)].sha256hash,\\n            latest.urls[uint8(URLS.Animation)].url,\\n            latest.urls[uint8(URLS.Animation)].sha256hash,\\n            latest.urls[uint8(URLS.PatchNotes)].url,\\n            latest.urls[uint8(URLS.PatchNotes)].sha256hash\\n        );\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT of a version\\n           Will get URIs from the last version added\\n      @param label The label of the version\\n      @return imageUrl\\n      @return imageHash\\n      @return animationUrl\\n      @return animationHash\\n     */\\n    function getURIsOfVersion(\\n        uint8[3] memory label\\n    )\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        Versions.Version memory version = versions.getVersion(label);\\n        return (\\n            version.urls[uint8(URLS.Image)].url,\\n            version.urls[uint8(URLS.Image)].sha256hash,\\n            version.urls[uint8(URLS.Animation)].url,\\n            version.urls[uint8(URLS.Animation)].sha256hash,\\n            version.urls[uint8(URLS.PatchNotes)].url,\\n            version.urls[uint8(URLS.PatchNotes)].sha256hash\\n        );\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (royaltyFundsRecipient == address(0)) {\\n            return (royaltyFundsRecipient, 0);\\n        }\\n        return (royaltyFundsRecipient, (_salePrice * royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id, will retrieve URIs from the last added version\\n        @param tokenId token id to get uri for\\n        @return metadata base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        Versions.Version memory version = versions.getLatestVersion();\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                MediaData(\\n                    version.urls[uint8(URLS.Image)].url,\\n                    version.urls[uint8(URLS.Animation)].url,\\n                    version.urls[uint8(URLS.PatchNotes)].url,\\n                    version.label\\n                ),\\n                tokenId,\\n                editionSize,\\n                address(this),\\n                seedOfTokens[tokenId]\\n            );\\n    }\\n\\n    /**\\n        @dev Get URI for given token id of given version\\n        @param tokenId token id to get uri for\\n        @param label the label of the version\\n        @return metadata base64-encoded json metadata object\\n    */\\n    function tokenURIOfVersion(\\n        uint256 tokenId,\\n        uint8[3] memory label\\n    )\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n        Versions.Version memory version = versions.getVersion(label);\\n\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                MediaData(\\n                    version.urls[uint8(URLS.Image)].url,\\n                    version.urls[uint8(URLS.Animation)].url,\\n                    version.urls[uint8(URLS.PatchNotes)].url,\\n                    version.label\\n                ),\\n                tokenId,\\n                editionSize,\\n                address(this),\\n                seedOfTokens[tokenId]\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(ISeededProject).interfaceId == interfaceId ||\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4371105a019f468f113b5170b5e95f2e898906133242d20e62d4494da16601e5\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\n\\nstruct MediaData{\\n    string imageUrl;\\n    string animationUrl;\\n    string patchNotesUrl;\\n    uint8[3] label;\\n}\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// @notice converts address to string\\n    /// @param _address address to return as a string\\n    function addressToString(address _address) public pure returns(string memory) {\\n        bytes20 _bytes = bytes20(_address);\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for(uint i = 0; i < 20; i++) {\\n            _string[2+i*2] = HEX[uint8(_bytes[i] >> 4)];\\n            _string[3+i*2] = HEX[uint8(_bytes[i] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    // Proxy to olta's uintArray3ToString function\\n    function uintArray3ToString (uint8[3] memory label)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return Versions.uintArray3ToString(label);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress,\\n            tokenSeed\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenOfEdition\\n                        ),\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenOfEdition\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenSeed\\n                        ),\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress,\\n                            tokenSeed\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenSeed\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress,\\n                            tokenSeed\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function version(\\n        uint8[3] memory label,\\n        string memory patchNotesUrl\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'media_version\\\": \\\"',\\n                uintArray3ToString(label),\\n                '\\\", \\\"'\\n                'patch_notes\\\": \\\"',\\n                patchNotesUrl,\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n\\n    function imageUrl(\\n        string memory url,\\n        uint256 id\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'image\\\": \\\"',\\n                url,\\n                 \\\"?id=\\\", // if just url \\\"/id\\\" this will work with arweave pathmanifests\\n                numberToString(id),\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n\\n    function animationUrl(\\n        string memory url,\\n        uint256 tokenId,\\n        address tokenAddress\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'animation_url\\\": \\\"',\\n                url,\\n                \\\"?id=\\\",\\n                numberToString(tokenId),\\n                \\\"&address=\\\",\\n                addressToString(tokenAddress),\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n\\n    function animationUrl(\\n        string memory url,\\n        uint256 tokenId,\\n        address tokenAddress,\\n        uint256 seed\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'animation_url\\\": \\\"',\\n                url,\\n                \\\"?id=\\\",\\n                numberToString(tokenId),\\n                \\\"&address=\\\",\\n                addressToString(tokenAddress),\\n                \\\"&seed=\\\",\\n                numberToString(seed),\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3bef9ad370a8692aa93e18db235ef0ba3752bbb119de1d1a2a65bd7cf59d502a\",\"license\":\"GPL-3.0\"},\"contracts/Versions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n/*\\n    please note this is work in progress and not ready for production just yet\\n*/\\n\\n/**\\n @title A libary for versioning of NFT content and metadata\\n @dev Provides versioning for nft content and follows the semantic labeling convention.\\n Each version contains an array of content and content hash pairs as well as a version label.\\n Versions can be added and urls can be updated along with getters to retrieve specific versions and history.\\n\\n Include with `using Versions for Versions.set;`\\n @author george baldwin\\n */\\nlibrary Versions {\\n\\n    struct UrlHashPair {\\n        string url;\\n        bytes32 sha256hash;\\n    }\\n\\n    struct Version {\\n        UrlHashPair[] urls;\\n        uint8[3] label;\\n    }\\n\\n    struct Set {\\n        string[] labels;\\n        mapping(string => Version) versions;\\n    }\\n\\n    /**\\n     @dev creates a new version from array of url hashe pairs and a semantic label\\n     @param urls An array of urls with sha-256 hash of the content on that url\\n     @param label a version label in a semantic style\\n     */\\n    function createVersion(\\n        UrlHashPair[] memory urls,\\n        uint8[3] memory label\\n    )\\n        internal\\n        pure\\n        returns (Version memory)\\n    {\\n        Version memory version = Version(urls, label);\\n        return version;\\n    }\\n\\n    /**\\n     @dev adds a version to a given set by pushing the version label to an array\\n        and mapping the version to a string of that label. Will revert if the label already exists.\\n     @param set the set to add the version to\\n     @param version the version that will be stored\\n     */\\n    function addVersion(\\n        Set storage set,\\n        Version memory version\\n    ) internal {\\n\\n        string memory labelKey = uintArray3ToString(version.label);\\n\\n        require(\\n            set.versions[labelKey].urls.length == 0,\\n            \\\"#Versions: A version with that label already exists\\\"\\n        );\\n\\n        // add to labels array\\n        set.labels.push(labelKey);\\n\\n        // store urls and hashes in mapping\\n        for (uint256 i = 0; i < version.urls.length; i++){\\n            set.versions[labelKey].urls.push(version.urls[i]);\\n        }\\n\\n        // store label\\n        set.versions[labelKey].label = version.label;\\n    }\\n\\n    /**\\n     @dev gets a version from a given set. Will revert if the version doesn't exist.\\n     @param set The set to get the version from\\n     @param label The label of the requested version\\n     @return version The version corrosponeding to the label\\n     */\\n    function getVersion(\\n        Set storage set,\\n        uint8[3] memory label\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        Version memory version = set.versions[uintArray3ToString(label)];\\n        require(\\n            version.urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        return version;\\n    }\\n\\n    /**\\n     @dev updates a url of a given version in a given set\\n     @param set The set containing the version of which the url will be updated\\n     @param label The label of the requested version\\n     @param index The index of the url\\n     @param newUrl The new url to be updated to\\n     */\\n    function updateVersionURL(\\n        Set storage set,\\n        uint8[3] memory label,\\n        uint256 index,\\n        string memory newUrl\\n    ) internal {\\n        string memory labelKey = uintArray3ToString(label);\\n        require(\\n            set.versions[labelKey].urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        require(\\n            set.versions[labelKey].urls.length > index,\\n            \\\"#Versions: The url does not exist on that version\\\"\\n        );\\n        set.versions[labelKey].urls[index].url = newUrl;\\n    }\\n\\n    /**\\n     @dev gets all the version labels of a given set\\n     @param set The set containing the versions\\n     @return labels an array of labels as strings\\n    */\\n    function getAllLabels(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return set.labels;\\n    }\\n\\n    /**\\n     @dev gets all the versions of a given set\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getAllVersions(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        return getVersionsFromLabels(set, set.labels);\\n    }\\n\\n    /**\\n     @dev gets the versions of a given array of labels as strings, reverts if no labels are given\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getVersionsFromLabels(\\n        Set storage set,\\n        string[] memory _labels\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        require(_labels.length != 0, \\\"#Versions: No labels provided\\\");\\n        Version[] memory versionArray = new Version[](_labels.length);\\n\\n        for (uint256 i = 0; i < _labels.length; i++) {\\n                versionArray[i] = set.versions[_labels[i]];\\n        }\\n\\n        return versionArray;\\n    }\\n\\n    /**\\n     @dev gets the last added version of a given set, reverts if no versions are in the set\\n     @param set The set containing the versions\\n     @return version the last added version\\n    */\\n    function getLatestVersion(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        require(\\n            set.labels.length != 0,\\n            \\\"#Versions: No versions exist\\\"\\n        );\\n        return set.versions[\\n            set.labels[set.labels.length - 1]\\n        ];\\n    }\\n\\n    /**\\n     @dev A helper function to convert a three length array of numbers into a semantic style verison label\\n     @param label the label as a uint8[3] array\\n     @return label the label as a string\\n    */\\n    function uintArray3ToString (uint8[3] memory label)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(\\n            StringsUpgradeable.toString(label[0]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[1]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[2])\\n        ));\\n    }\\n}\",\"keccak256\":\"0xf7270873b91a27889da96834faf1bf461d3f5f7a7deaa1f1269d949d534c3ee2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620043f5380380620043f583398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007c565b6000602082840312156200005d57600080fd5b81516001600160a01b03811681146200007557600080fd5b9392505050565b60805160601c61434c620000a96000396000818161142e015281816115f00152611c34015261434c6000f3fe6080604052600436106102465760003560e01c806370a0823111610139578063b88d4fde116100b6578063e985e9c51161007a578063e985e9c5146106cd578063efef39a1146106ed578063f2fde38b14610700578063f4ed0f4614610720578063f51f96dd14610736578063f92094ea1461074c57600080fd5b8063b88d4fde14610635578063b9c9d93a14610655578063c87b56dd1461066b578063d709b1981461068b578063e9693274146106ad57600080fd5b806395d89b41116100fd57806395d89b41146105ab578063a22cb465146105c0578063ac486c1e146105e0578063b21d81ae146105f5578063b6ddcd521461061557600080fd5b806370a082311461051c578063715018a61461053c5780637284e4161461055157806378b4e897146105665780638da5cb5b1461059657600080fd5b806329ec16dd116101c75780634b0f033b1161018b5780634b0f033b1461046f57806351ec35f91461049c57806359e59708146104bc5780636352211e146104dc578063659786ea146104fc57600080fd5b806329ec16dd146103bb5780632a55205a146103db5780633ccfd60b1461041a57806342842e0e1461042f57806342966c681461044f57600080fd5b806313d2de321161020e57806313d2de321461031f57806318160ddd1461033f5780631919fed71461035457806323b872dd1461037457806328c5440f1461039457600080fd5b806301ffc9a71461024b57806306fdde0314610280578063081812fc146102a2578063095ea7b3146102da5780630b65b6e7146102fc575b600080fd5b34801561025757600080fd5b5061026b6102663660046139b4565b61076c565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102956107b2565b6040516102779190613dd5565b3480156102ae57600080fd5b506102c26102bd366004613a98565b610844565b6040516001600160a01b039091168152602001610277565b3480156102e657600080fd5b506102fa6102f536600461384b565b6108d1565b005b34801561030857600080fd5b506103116109e2565b604051908152602001610277565b34801561032b57600080fd5b506102fa61033a36600461364f565b610a16565b34801561034b57600080fd5b50610311610af4565b34801561036057600080fd5b506102fa61036f366004613a98565b610afe565b34801561038057600080fd5b506102fa61038f366004613758565b610b69565b3480156103a057600080fd5b506103a9610b9b565b60405161027796959493929190613de8565b3480156103c757600080fd5b506102fa6103d6366004613818565b610c94565b3480156103e757600080fd5b506103fb6103f6366004613ade565b610d30565b604080516001600160a01b039093168352602083019190915201610277565b34801561042657600080fd5b506102fa610d90565b34801561043b57600080fd5b506102fa61044a366004613758565b610dd2565b34801561045b57600080fd5b506102fa61046a366004613a98565b610ded565b34801561047b57600080fd5b5061031161048a366004613a98565b60d16020526000908152604090205481565b3480156104a857600080fd5b506102fa6104b7366004613a64565b610e3d565b3480156104c857600080fd5b506103116104d736600461384b565b610e75565b3480156104e857600080fd5b506102c26104f7366004613a98565b610f28565b34801561050857600080fd5b506102fa610517366004613632565b610f9f565b34801561052857600080fd5b50610311610537366004613632565b61101c565b34801561054857600080fd5b506102fa6110a3565b34801561055d57600080fd5b506102956110dc565b34801561057257600080fd5b5061026b610581366004613a98565b60d06020526000908152604090205460ff1681565b3480156105a257600080fd5b506102c261116a565b3480156105b757600080fd5b5061029561117e565b3480156105cc57600080fd5b506102fa6105db366004613818565b61118d565b3480156105ec57600080fd5b506102fa611247565b34801561060157600080fd5b506103a961061036600461393a565b6112ff565b34801561062157600080fd5b50610295610630366004613ab1565b6113f6565b34801561064157600080fd5b506102fa610650366004613799565b611581565b34801561066157600080fd5b5061031160ce5481565b34801561067757600080fd5b50610295610686366004613a98565b6115b9565b34801561069757600080fd5b506106a061174a565b6040516102779190613cd4565b3480156106b957600080fd5b506102fa6106c8366004613956565b611756565b3480156106d957600080fd5b5061026b6106e836600461371f565b6117d5565b6103116106fb366004613a98565b611803565b34801561070c57600080fd5b506102fa61071b366004613632565b611956565b34801561072c57600080fd5b5061031160cc5481565b34801561074257600080fd5b5061031160d25481565b34801561075857600080fd5b50610311610767366004613877565b6119f3565b6000631302bf2f60e11b6001600160e01b03198316148061079d575063152a902d60e11b6001600160e01b03198316145b806107ac57506107ac82611a22565b92915050565b6060606580546107c190614209565b80601f01602080910402602001604051908101604052809291908181526020018280546107ed90614209565b801561083a5780601f1061080f5761010080835404028352916020019161083a565b820191906000526020600020905b81548152906001019060200180831161081d57829003601f168201915b5050505050905090565b600061084f82611a72565b6108b55760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b60006108dc82610f28565b9050806001600160a01b0316836001600160a01b0316141561094a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016108ac565b336001600160a01b0382161480610966575061096681336117d5565b6109d35760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016108ac565b6109dd8383611a8f565b505050565b600060cc54600014156109f6575060001990565b60cd5460cc54610a0790600161417b565b610a1191906141c6565b905090565b600054610100900460ff1680610a2f575060005460ff16155b610a4b5760405162461bcd60e51b81526004016108ac90613f89565b600054610100900460ff16158015610a6d576000805461ffff19166101011790555b610a778787611afd565b610a7f611b84565b610a8888611956565b8451610a9b9060c99060208801906132cc565b5060cc83905560ce829055610ab460cd80546001019055565b60d380546001600160a01b0319166001600160a01b038a16179055610ad884611bff565b8015610aea576000805461ff00191690555b5050505050505050565b6000610a11611d3d565b33610b0761116a565b6001600160a01b031614610b2d5760405162461bcd60e51b81526004016108ac9061401c565b60d28190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622906020015b60405180910390a150565b610b74335b82611d4a565b610b905760405162461bcd60e51b81526004016108ac90614088565b6109dd838383611e0c565b60606000606060006060600080610bb260ca611f9a565b8051909150600060ff1681518110610bcc57610bcc61429f565b60209081029190910101515181518051600090610beb57610beb61429f565b6020908102919091018101510151825180516001908110610c0e57610c0e61429f565b602090810291909101015151835180516001908110610c2f57610c2f61429f565b6020908102919091018101510151845180516002908110610c5257610c5261429f565b602090810291909101015151855180516002908110610c7357610c7361429f565b60200260200101516020015196509650965096509650965050909192939495565b33610c9d61116a565b6001600160a01b031614610cc35760405162461bcd60e51b81526004016108ac9061401c565b6001600160a01b038216600081815260cf60205260409020805460ff1916831515179055336001600160a01b03167f8cd75c8017bbe4f4552de2caa02ab21b1e3918c4693ab35db62125a620999fcc83604051610d24911515815260200190565b60405180910390a35050565b60d35460009081906001600160a01b0316610d5a57505060d3546001600160a01b03166000610d89565b60d35460ce546001600160a01b039091169061271090610d7a90866141a7565b610d849190614193565b915091505b9250929050565b33610d9961116a565b6001600160a01b031614610dbf5760405162461bcd60e51b81526004016108ac9061401c565b610dd0610dca61116a565b4761218f565b565b6109dd83838360405180602001604052806000815250611581565b610df633610b6e565b610e315760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b60448201526064016108ac565b610e3a816122a8565b50565b33610e4661116a565b6001600160a01b031614610e6c5760405162461bcd60e51b81526004016108ac9061401c565b610e3a81611bff565b6000610e7f612331565b610e9b5760405162461bcd60e51b81526004016108ac90614051565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610eb25790505090506040518060400160405280856001600160a01b031681526020018481525081600081518110610f0c57610f0c61429f565b6020026020010181905250610f20816123a1565b949350505050565b6000818152606760205260408120546001600160a01b0316806107ac5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016108ac565b33610fa861116a565b6001600160a01b031614610fce5760405162461bcd60e51b81526004016108ac9061401c565b60d380546001600160a01b0319166001600160a01b0383169081179091556040519081527ffa92addb00b86a2d8f76a9a3213317d95a3a5ef70fe02927ac60a7431fcf554390602001610b5e565b60006001600160a01b0382166110875760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016108ac565b506001600160a01b031660009081526068602052604090205490565b336110ac61116a565b6001600160a01b0316146110d25760405162461bcd60e51b81526004016108ac9061401c565b610dd060006124c7565b60c980546110e990614209565b80601f016020809104026020016040519081016040528092919081815260200182805461111590614209565b80156111625780601f1061113757610100808354040283529160200191611162565b820191906000526020600020905b81548152906001019060200180831161114557829003601f168201915b505050505081565b6000610a116097546001600160a01b031690565b6060606680546107c190614209565b6001600160a01b0382163314156111e25760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016108ac565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319101610d24565b3361125061116a565b6001600160a01b0316146112765760405162461bcd60e51b81526004016108ac9061401c565b60cc54156112bd5760405162461bcd60e51b815260206004820152601460248201527326bab9ba1031329037b832b71032b234ba34b7b760611b60448201526064016108ac565b6112c5611d3d565b60cc8190556040519081527f7606964e2812572286840c4625acbe2358fde96abb23114de1cbd342fb9f5d139060200160405180910390a1565b60606000818181818061131360ca89612519565b8051909150600060ff168151811061132d5761132d61429f565b6020908102919091010151518151805160009061134c5761134c61429f565b602090810291909101810151015182518051600190811061136f5761136f61429f565b6020908102919091010151518351805160019081106113905761139061429f565b60209081029190910181015101518451805160029081106113b3576113b361429f565b6020908102919091010151518551805160029081106113d4576113d461429f565b6020026020010151602001519650965096509650965096505091939550919395565b606061140183611a72565b61141d5760405162461bcd60e51b81526004016108ac90613f67565b600061142a60ca84612519565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f29f99f6114636107b2565b60408051608081019091528451805160c9929182916000906114875761148761429f565b6020908102919091018101515182528751910190600160ff16815181106114b0576114b061429f565b6020908102919091018101515182528751910190600260ff16815181106114d9576114d961429f565b602002602001015160000151815260200186602001518152508860cc543060d160008d8152602001908152602001600020546040518863ffffffff1660e01b815260040161152d9796959493929190613e41565b60006040518083038186803b15801561154557600080fd5b505afa158015611559573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f2091908101906139ee565b61158b3383611d4a565b6115a75760405162461bcd60e51b81526004016108ac90614088565b6115b3848484846126be565b50505050565b60606115c482611a72565b6115e05760405162461bcd60e51b81526004016108ac90613f67565b60006115ec60ca611f9a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634f29f99f6116256107b2565b60408051608081019091528451805160c9929182916000906116495761164961429f565b6020908102919091018101515182528751910190600160ff16815181106116725761167261429f565b6020908102919091018101515182528751910190600260ff168151811061169b5761169b61429f565b602002602001015160000151815260200186602001518152508760cc543060d160008c8152602001908152602001600020546040518863ffffffff1660e01b81526004016116ef9796959493929190613e41565b60006040518083038186803b15801561170757600080fd5b505afa15801561171b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174391908101906139ee565b9392505050565b6060610a1160ca6126f1565b3361175f61116a565b6001600160a01b0316146117855760405162461bcd60e51b81526004016108ac9061401c565b61179560ca8460ff8516846127d0565b7f3cdb3b7fee8bd4227020e3bde799a81de9023d479ba5c7825521fd3b8242af468383836040516117c893929190613dac565b60405180910390a1505050565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60008060d254116118455760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420666f722073616c6560a01b60448201526064016108ac565b60d25434146118845760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720707269636560a81b60448201526064016108ac565b604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161189b5790505090506040518060400160405280336001600160a01b0316815260200184815250816000815181106118f5576118f561429f565b60200260200101819052507f60a6c75698fadb72223808131f9f9bb9db3afa32122db6d94fb8fc985a504baa60d254336040516119459291909182526001600160a01b0316602082015260400190565b60405180910390a1611743816123a1565b3361195f61116a565b6001600160a01b0316146119855760405162461bcd60e51b81526004016108ac9061401c565b6001600160a01b0381166119ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108ac565b610e3a816124c7565b60006119fd612331565b611a195760405162461bcd60e51b81526004016108ac90614051565b6107ac826123a1565b60006001600160e01b031982166380ac58cd60e01b1480611a5357506001600160e01b03198216635b5e139f60e01b145b806107ac57506301ffc9a760e01b6001600160e01b03198316146107ac565b6000908152606760205260409020546001600160a01b0316151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ac482610f28565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff1680611b16575060005460ff16155b611b325760405162461bcd60e51b81526004016108ac90613f89565b600054610100900460ff16158015611b54576000805461ffff19166101011790555b611b5c612906565b611b64612906565b611b6e8383612970565b80156109dd576000805461ff0019169055505050565b600054610100900460ff1680611b9d575060005460ff16155b611bb95760405162461bcd60e51b81526004016108ac90613f89565b600054610100900460ff16158015611bdb576000805461ffff19166101011790555b611be3612906565b611beb612a05565b8015610e3a576000805461ff001916905550565b611c0a60ca82612a65565b80515160031115611d0a57602081015160405163612d071760e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163612d071791611c6791600401613d9e565b60006040518083038186803b158015611c7f57600080fd5b505afa158015611c93573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cbb91908101906139ee565b8251519091505b6003811015611d075760405160cb90611cdc908490613baf565b9081526040519081900360200190208054600101815560005280611cff81614244565b915050611cc2565b50505b7f166b7e506b0600a3fd1259824a1311e569ddb4194c483361dbd1888632897dfa8160200151604051610b5e9190613d9e565b60006001610a0760cd5490565b6000611d5582611a72565b611db65760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016108ac565b6000611dc183610f28565b9050806001600160a01b0316846001600160a01b03161480611dfc5750836001600160a01b0316611df184610844565b6001600160a01b0316145b80610f205750610f2081856117d5565b826001600160a01b0316611e1f82610f28565b6001600160a01b031614611e875760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016108ac565b6001600160a01b038216611ee95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108ac565b611ef4600082611a8f565b6001600160a01b0383166000908152606860205260408120805460019290611f1d9084906141c6565b90915550506001600160a01b0382166000908152606860205260408120805460019290611f4b90849061417b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206142f783398151915291a4505050565b611fa2613350565b8154611ff05760405162461bcd60e51b815260206004820152601c60248201527f2356657273696f6e733a204e6f2076657273696f6e732065786973740000000060448201526064016108ac565b81546001808401918491612003916141c6565b815481106120135761201361429f565b9060005260206000200160405161202a9190613c25565b908152604080519182900360209081018320805460609281028501830184529284018381529092849284919060009085015b8282101561212a578382906000526020600020906002020160405180604001604052908160008201805461208f90614209565b80601f01602080910402602001604051908101604052809291908181526020018280546120bb90614209565b80156121085780601f106120dd57610100808354040283529160200191612108565b820191906000526020600020905b8154815290600101906020018083116120eb57829003601f168201915b505050505081526020016001820154815250508152602001906001019061205c565b50505090825250604080516060810191829052602090920191906001840190600390826000855b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116121515790505050505050815250509050919050565b804710156121df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016108ac565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461222c576040519150601f19603f3d011682016040523d82523d6000602084013e612231565b606091505b50509050806109dd5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016108ac565b60006122b382610f28565b90506122c0600083611a8f565b6001600160a01b03811660009081526068602052604081208054600192906122e99084906141c6565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206142f7833981519152908390a45050565b60003361233c61116a565b6001600160a01b031614156123515750600190565b6000805260cf6020527fe02c59459e6ae69bba35526a32783b104c6119df0d640a9ac4990ec2f8d493a95460ff161561238a5750600190565b5033600090815260cf602052604090205460ff1690565b6000806123ad60cd5490565b9050600060018451836123c0919061417b565b6123ca91906141c6565b905060cc54600014806123df575060cc548111155b6124165760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b60448201526064016108ac565b8061242060cd5490565b116124bc5761246761243160cd5490565b858461243c60cd5490565b61244691906141c6565b815181106124565761245661429f565b602002602001015160200151612bfa565b6124a9848361247560cd5490565b61247f91906141c6565b8151811061248f5761248f61429f565b6020026020010151600001516124a460cd5490565b612cc0565b6124b760cd80546001019055565b612416565b60cd54949350505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b612521613350565b60008360010161253084612de1565b60405161253d9190613baf565b908152604080519182900360209081018320805460609281028501830184529284018381529092849284919060009085015b8282101561263d57838290600052602060002090600202016040518060400160405290816000820180546125a290614209565b80601f01602080910402602001604051908101604052809291908181526020018280546125ce90614209565b801561261b5780601f106125f05761010080835404028352916020019161261b565b820191906000526020600020905b8154815290600101906020018083116125fe57829003601f168201915b505050505081526020016001820154815250508152602001906001019061256f565b50505090825250604080516060810191829052602090920191906001840190600390826000855b825461010083900a900460ff16815260206001928301818104948501949093039092029101808411612664579050505050919092525050815151919250506117435760405162461bcd60e51b81526004016108ac90613fd7565b6126c9848484611e0c565b6126d584848484612e35565b6115b35760405162461bcd60e51b81526004016108ac90613f15565b60606107ac8283600001805480602002602001604051908101604052809291908181526020016000905b828210156127c757838290600052602060002001805461273a90614209565b80601f016020809104026020016040519081016040528092919081815260200182805461276690614209565b80156127b35780601f10612788576101008083540402835291602001916127b3565b820191906000526020600020905b81548152906001019060200180831161279657829003601f168201915b50505050508152602001906001019061271b565b50505050612f42565b60006127db84612de1565b905084600101816040516127ef9190613baf565b9081526040519081900360200190205461281b5760405162461bcd60e51b81526004016108ac90613fd7565b82856001018260405161282e9190613baf565b90815260405190819003602001902054116128a55760405162461bcd60e51b815260206004820152603160248201527f2356657273696f6e733a205468652075726c20646f6573206e6f7420657869736044820152703a1037b7103a3430ba103b32b939b4b7b760791b60648201526084016108ac565b8185600101826040516128b89190613baf565b908152602001604051809103902060000184815481106128da576128da61429f565b906000526020600020906002020160000190805190602001906128fe9291906132cc565b505050505050565b600054610100900460ff168061291f575060005460ff16155b61293b5760405162461bcd60e51b81526004016108ac90613f89565b600054610100900460ff16158015611beb576000805461ffff19166101011790558015610e3a576000805461ff001916905550565b600054610100900460ff1680612989575060005460ff16155b6129a55760405162461bcd60e51b81526004016108ac90613f89565b600054610100900460ff161580156129c7576000805461ffff19166101011790555b82516129da9060659060208601906132cc565b5081516129ee9060669060208501906132cc565b5080156109dd576000805461ff0019169055505050565b600054610100900460ff1680612a1e575060005460ff16155b612a3a5760405162461bcd60e51b81526004016108ac90613f89565b600054610100900460ff16158015612a5c576000805461ffff19166101011790555b611beb336124c7565b6000612a748260200151612de1565b90508260010181604051612a889190613baf565b9081526040519081900360200190205415612b015760405162461bcd60e51b815260206004820152603360248201527f2356657273696f6e733a20412076657273696f6e20776974682074686174206c6044820152726162656c20616c72656164792065786973747360681b60648201526084016108ac565b825460018101845560008481526020908190208351612b279391909101918401906132cc565b5060005b825151811015612bc3578360010182604051612b479190613baf565b9081526040519081900360200190208351805183908110612b6a57612b6a61429f565b602090810291909101810151825460018101845560009384529282902081518051929460020290910192612ba3928492909101906132cc565b506020820151816001015550508080612bbb90614244565b915050612b2b565b5081602001518360010182604051612bdb9190613baf565b90815260200160405180910390206001019060036115b392919061336f565b600081815260d0602052604090205460ff1615612c4d5760405162461bcd60e51b815260206004820152601160248201527014d9595908185b1c9958591e481d5cd959607a1b60448201526064016108ac565b612c56816131ba565b612c965760405162461bcd60e51b815260206004820152601160248201527053656564206f7574206f662072616e676560781b60448201526064016108ac565b600081815260d060209081526040808320805460ff1916600117905593825260d190529190912055565b6001600160a01b038216612d165760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108ac565b612d1f81611a72565b15612d6c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108ac565b6001600160a01b0382166000908152606860205260408120805460019290612d9590849061417b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206142f7833981519152908290a45050565b6060612df78260005b602002015160ff166131cf565b612e02836001612dea565b612e0d846002612dea565b604051602001612e1f93929190613bcb565b6040516020818303038152906040529050919050565b60006001600160a01b0384163b15612f3757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612e79903390899088908890600401613c97565b602060405180830381600087803b158015612e9357600080fd5b505af1925050508015612ec3575060408051601f3d908101601f19168201909252612ec0918101906139d1565b60015b612f1d573d808015612ef1576040519150601f19603f3d011682016040523d82523d6000602084013e612ef6565b606091505b508051612f155760405162461bcd60e51b81526004016108ac90613f15565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610f20565b506001949350505050565b6060815160001415612f965760405162461bcd60e51b815260206004820152601d60248201527f2356657273696f6e733a204e6f206c6162656c732070726f766964656400000060448201526064016108ac565b600082516001600160401b03811115612fb157612fb16142b5565b604051908082528060200260200182016040528015612fea57816020015b612fd7613350565b815260200190600190039081612fcf5790505b50905060005b83518110156131b2578460010184828151811061300f5761300f61429f565b60200260200101516040516130249190613baf565b908152604080519182900360209081018320805460609281028501830184529284018381529092849284919060009085015b82821015613124578382906000526020600020906002020160405180604001604052908160008201805461308990614209565b80601f01602080910402602001604051908101604052809291908181526020018280546130b590614209565b80156131025780601f106130d757610100808354040283529160200191613102565b820191906000526020600020905b8154815290600101906020018083116130e557829003601f168201915b5050505050815260200160018201548152505081526020019060010190613056565b50505090825250604080516060810191829052602090920191906001840190600390826000855b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161314b5790505050505050815250508282815181106131945761319461429f565b602002602001018190525080806131aa90614244565b915050612ff0565b509392505050565b600080821180156107ac57505060cc54101590565b6060816131f35750506040805180820190915260018152600360fc1b602082015290565b8160005b811561321d578061320781614244565b91506132169050600a83614193565b91506131f7565b6000816001600160401b03811115613237576132376142b5565b6040519080825280601f01601f191660200182016040528015613261576020820181803683370190505b5090505b8415610f20576132766001836141c6565b9150613283600a8661425f565b61328e90603061417b565b60f81b8183815181106132a3576132a361429f565b60200101906001600160f81b031916908160001a9053506132c5600a86614193565b9450613265565b8280546132d890614209565b90600052602060002090601f0160209004810192826132fa5760008555613340565b82601f1061331357805160ff1916838001178555613340565b82800160010185558215613340579182015b82811115613340578251825591602001919060010190613325565b5061334c9291506133f9565b5090565b60405180604001604052806060815260200161336a61340e565b905290565b6001830191839082156133405791602002820160005b838211156133c357835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302613385565b80156133f05782816101000a81549060ff02191690556001016020816000010492830192600103026133c3565b505061334c9291505b5b8082111561334c57600081556001016133fa565b60405180606001604052806003906020820280368337509192915050565b600061343f61343a84614154565b614101565b905082815283838301111561345357600080fd5b828260208301376000602084830101529392505050565b8035613475816142cb565b919050565b600082601f83011261348b57600080fd5b604051606081018181106001600160401b03821117156134ad576134ad6142b5565b6040528083606081018610156134c257600080fd5b60005b60038110156134ec576134d782613621565b835260209283019291909101906001016134c5565b509195945050505050565b600082601f83011261350857600080fd5b6117438383356020850161342c565b60006080828403121561352957600080fd5b6135316140d9565b905081356001600160401b038082111561354a57600080fd5b818401915084601f83011261355e57600080fd5b8135602061356e61343a83614131565b80838252828201915082860189848660051b890101111561358e57600080fd5b60005b85811015613602578135878111156135a857600080fd5b88016040818d03601f19018113156135bf57600080fd5b6135c76140d9565b878301358a8111156135d857600080fd5b6135e68f8a838701016134f7565b8252509101358682015284529284019290840190600101613591565b50508652506136138787830161347a565b818601525050505092915050565b803560ff8116811461347557600080fd5b60006020828403121561364457600080fd5b8135611743816142cb565b600080600080600080600060e0888a03121561366a57600080fd5b6136738861346a565b965060208801356001600160401b038082111561368f57600080fd5b61369b8b838c016134f7565b975060408a01359150808211156136b157600080fd5b6136bd8b838c016134f7565b965060608a01359150808211156136d357600080fd5b6136df8b838c016134f7565b955060808a01359150808211156136f557600080fd5b506137028a828b01613517565b93505060a0880135915060c0880135905092959891949750929550565b6000806040838503121561373257600080fd5b823561373d816142cb565b9150602083013561374d816142cb565b809150509250929050565b60008060006060848603121561376d57600080fd5b8335613778816142cb565b92506020840135613788816142cb565b929592945050506040919091013590565b600080600080608085870312156137af57600080fd5b84356137ba816142cb565b935060208501356137ca816142cb565b92506040850135915060608501356001600160401b038111156137ec57600080fd5b8501601f810187136137fd57600080fd5b61380c8782356020840161342c565b91505092959194509250565b6000806040838503121561382b57600080fd5b8235613836816142cb565b91506020830135801515811461374d57600080fd5b6000806040838503121561385e57600080fd5b8235613869816142cb565b946020939093013593505050565b6000602080838503121561388a57600080fd5b82356001600160401b038111156138a057600080fd5b8301601f810185136138b157600080fd5b80356138bf61343a82614131565b80828252848201915084840188868560061b87010111156138df57600080fd5b60009450845b8481101561392c57604080838c0312156138fd578687fd5b6139056140d9565b8335613910816142cb565b81528389013589820152855293870193909101906001016138e5565b509098975050505050505050565b60006060828403121561394c57600080fd5b611743838361347a565b600080600060a0848603121561396b57600080fd5b613975858561347a565b925061398360608501613621565b915060808401356001600160401b0381111561399e57600080fd5b6139aa868287016134f7565b9150509250925092565b6000602082840312156139c657600080fd5b8135611743816142e0565b6000602082840312156139e357600080fd5b8151611743816142e0565b600060208284031215613a0057600080fd5b81516001600160401b03811115613a1657600080fd5b8201601f81018413613a2757600080fd5b8051613a3561343a82614154565b818152856020838501011115613a4a57600080fd5b613a5b8260208301602086016141dd565b95945050505050565b600060208284031215613a7657600080fd5b81356001600160401b03811115613a8c57600080fd5b610f2084828501613517565b600060208284031215613aaa57600080fd5b5035919050565b60008060808385031215613ac457600080fd5b82359150613ad5846020850161347a565b90509250929050565b60008060408385031215613af157600080fd5b50508035926020909101359150565b8060005b60038110156115b357815160ff16845260209384019390910190600101613b04565b60008151808452613b3e8160208601602086016141dd565b601f01601f19169290920160200192915050565b6000815160c08452613b6760c0850182613b26565b905060208301518482036020860152613b808282613b26565b91505060408301518482036040860152613b9a8282613b26565b91505060608301516131b26060860182613b00565b60008251613bc18184602087016141dd565b9190910192915050565b60008451613bdd8184602089016141dd565b8083019050601760f91b8082528551613bfd816001850160208a016141dd565b60019201918201528351613c188160028401602088016141dd565b0160020195945050505050565b6000808354613c3381614209565b60018281168015613c4b5760018114613c5c57613c8b565b60ff19841687528287019450613c8b565b8760005260208060002060005b85811015613c825781548a820152908401908201613c69565b50505082870194505b50929695505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613cca90830184613b26565b9695505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561392c57888303603f19018552815180516080808652815190860181905260a080870192600583901b880190910191908b019060005b81811015613d7657888403609f19018552825180518d8652613d598e870182613b26565b918f0151958f0195909552948d01949350918c0191600101613d35565b5050509189015191613d8a868b0184613b00565b968901969450505090860190600101613cfb565b606081016107ac8284613b00565b613db68185613b00565b60ff8316606082015260a060808201526000613a5b60a0830184613b26565b6020815260006117436020830184613b26565b60c081526000613dfb60c0830189613b26565b8760208401528281036040840152613e138188613b26565b90508560608401528281036080840152613e2d8186613b26565b9150508260a0830152979650505050505050565b60e081526000613e5460e083018a613b26565b60208382038185015260008a54613e6a81614209565b80855260018281168015613e855760018114613e9957613ec7565b60ff19841687870152604087019450613ec7565b8e6000528560002060005b84811015613ebf578154898201890152908301908701613ea4565b880187019550505b505050508481036040860152613edd818b613b52565b9350505050856060830152846080830152613f0360a08301856001600160a01b03169052565b8260c083015298975050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600890820152672737903a37b5b2b760c11b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526025908201527f2356657273696f6e733a205468652076657273696f6e20646f6573206e6f7420604082015264195e1a5cdd60da1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f4e6565647320746f20626520616e20616c6c6f776564206d696e746572000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604080519081016001600160401b03811182821017156140fb576140fb6142b5565b60405290565b604051601f8201601f191681016001600160401b0381118282101715614129576141296142b5565b604052919050565b60006001600160401b0382111561414a5761414a6142b5565b5060051b60200190565b60006001600160401b0382111561416d5761416d6142b5565b50601f01601f191660200190565b6000821982111561418e5761418e614273565b500190565b6000826141a2576141a2614289565b500490565b60008160001904831182151516156141c1576141c1614273565b500290565b6000828210156141d8576141d8614273565b500390565b60005b838110156141f85781810151838201526020016141e0565b838111156115b35750506000910152565b600181811c9082168061421d57607f821691505b6020821081141561423e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561425857614258614273565b5060010190565b60008261426e5761426e614289565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610e3a57600080fd5b6001600160e01b031981168114610e3a57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122052ca89e2f767d80fa56a2a246f3a013347f45ff8b48715dfdd67a5e683e849fa64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "iain nash Repository: https://github.com/ourzora/nft-editions",
    "details": "This allows creators to mint a unique serial edition of the same media within a custom contract",
    "events": {
      "ApprovedMinter(address,address,bool)": {
        "params": {
          "approved": "a boolean indicating the approval status",
          "minter": "the address of the approved minter",
          "owner": "the address of the owner of the project"
        }
      },
      "VersionAdded(uint8[3])": {
        "params": {
          "label": "the semantic version label added"
        }
      },
      "VersionURLUpdated(uint8[3],uint8,string)": {
        "params": {
          "index": "the url index 0 = image, 1 = animation",
          "label": "the semantic version label that the url is being updated",
          "url": "the url to be updated to"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addVersion(((string,bytes32)[],uint8[3]))": {
        "details": "Adds new version of the media updating the urls rendered in the metadata. The order added determins order stored, the label has no effect.",
        "params": {
          "_version": "The version to be added consisting of urls, hashes and a label"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "burns token id if owner or approved owner",
        "params": {
          "tokenId": "Token ID to burn"
        }
      },
      "finalizeEditionSize()": {
        "details": "if edition size was set to zero on initialization this allows the owner of the contract to set the edition size to the total supply"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getURIs()": {
        "details": "Get URIs for project, will retrieve URIs from the last added version",
        "returns": {
          "_0": "imageUrl The url of the image",
          "_1": "imageHash  A sha-256 hash of the content on the imageUrl, will be zero address if url blank",
          "_2": "animationUrl The url of the animation",
          "_3": "animationHash A sha-256 hash of the content on the animationUrl, will be zero address if url blank"
        }
      },
      "getURIsOfVersion(uint8[3])": {
        "details": "Get URIs for edition NFT of a version Will get URIs from the last version added",
        "params": {
          "label": "The label of the version"
        },
        "returns": {
          "_0": "imageUrl",
          "_1": "imageHash",
          "_2": "animationUrl",
          "_3": "animationHash"
        }
      },
      "initialize(address,string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256)": {
        "details": "Function to create a new project. Can only be called by the allowed creator Sets the only allowed minter to the address that creates/owns the project. This can be re-assigned or updated later",
        "params": {
          "_description": "Description of project, used in the description field of the NFT",
          "_editionSize": "Number of editions that can be minted in total. If 0, unlimited editions can be minted.",
          "_name": "Name of project, used in the title as \"$NAME NUMBER/TOTAL\"",
          "_owner": "User that owns and can mint the project, gets royalty and sales payouts and can update the base url if needed.",
          "_royaltyBPS": "BPS of the royalty set on the contract. Can be 0 for no royalty.",
          "_symbol": "Symbol of the project",
          "_version": "Version of the media consisting of urls and hashes of animation and image content"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintEdition(address,uint256)": {
        "details": "This mints one edition to the given address by an allowed minter on the edition instance.",
        "params": {
          "seed": "number of the chosen seed",
          "to": "address to send the newly minted edition to"
        }
      },
      "mintEditions((address,uint256)[])": {
        "details": "This mints multiple editions to the given list of addresses.",
        "params": {
          "recipients": "list of addresses and seeds to send the newly minted editions to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "numberCanMint()": {
        "details": "returns the number of editions allowed to mint (max_uint256 when open edition)",
        "returns": {
          "_0": "allowedToMint the number of editions allowed to mint"
        }
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "purchase(uint256)": {
        "details": "This allows the user to purchase an edition at the given price in the contract.",
        "params": {
          "seed": "the chosen seed number"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Get royalty information for token",
        "params": {
          "_salePrice": "Sale price for the token"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setApprovedMinter(address,bool)": {
        "details": "Sets the approved minting status of the given address. This requires that msg.sender is the owner of the given project id. If the ZeroAddress (address(0x0)) is set as a minter, anyone will be allowed to mint. This setup is similar to setApprovalForAll in the ERC721 spec.",
        "params": {
          "allowed": "boolean if that address is allowed to mint",
          "minter": "address to set approved minting status for"
        }
      },
      "setRoyaltyFundsRecipient(address)": {
        "params": {
          "newRecipientAddress": "the new address where royalties will be sent"
        }
      },
      "setSalePrice(uint256)": {
        "details": "This sets a simple ETH sales price Setting a sales price allows users to mint the edition until it sells out. For more granular sales, use an external sales contract.",
        "params": {
          "_salePrice": "if sale price is 0 sale is stopped, otherwise that amount  of ETH is needed to start the sale."
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Get URI for given token id, will retrieve URIs from the last added version",
        "params": {
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "metadata base64-encoded json metadata object"
        }
      },
      "tokenURIOfVersion(uint256,uint8[3])": {
        "details": "Get URI for given token id of given version",
        "params": {
          "label": "the label of the version",
          "tokenId": "token id to get uri for"
        },
        "returns": {
          "_0": "metadata base64-encoded json metadata object"
        }
      },
      "totalSupply()": {
        "details": "returns the number of minted tokens within the edition"
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateVersionURL(uint8[3],uint8,string)": {
        "details": "Updates a url of specified version by the owner of the project. Only URLs can be updated (data-uris are supported), hashes cannot be updated.",
        "params": {
          "_label": "The label of the specified version",
          "_url": "The url to be updated to",
          "_urlKey": "The index of the url to update 0=animation, 1=image"
        }
      },
      "withdraw()": {
        "details": "This withdraws ETH from the contract to the contract owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeEditionSize()": {
        "notice": "allows the creator to finalise the edition size to the total minted"
      },
      "owner()": {
        "notice": "Simple override for owner interface."
      },
      "setRoyaltyFundsRecipient(address)": {
        "notice": "sets a different royalty funds recipient"
      }
    },
    "notice": "This is a smart contract for handling dynamic contract minting. This is a fork of Zora NFT Editions changes: - Media urls are versioned allowing for updatable content preserving history - The NFT contract address is included in edition url query for easyier access to query the graph from within the NFT - SupportsInterface function includes project implementation interface",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 235,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1567,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1890,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 301,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 307,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 311,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 315,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 321,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1117,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2507,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "description",
        "offset": 0,
        "slot": "201",
        "type": "t_string_storage"
      },
      {
        "astId": 2514,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "versions",
        "offset": 0,
        "slot": "202",
        "type": "t_struct(Set)5336_storage"
      },
      {
        "astId": 2516,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "editionSize",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 2519,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "atEditionId",
        "offset": 0,
        "slot": "205",
        "type": "t_struct(Counter)1574_storage"
      },
      {
        "astId": 2521,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "royaltyBPS",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 2525,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2529,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "seedsUsed",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2533,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "seedOfTokens",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2535,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "salePrice",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 2540,
        "contract": "contracts/Projects/Seeded.sol:SeededProject",
        "label": "royaltyFundsRecipient",
        "offset": 0,
        "slot": "211",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UrlHashPair)5318_storage)dyn_storage": {
        "base": "t_struct(UrlHashPair)5318_storage",
        "encoding": "dynamic_array",
        "label": "struct Versions.UrlHashPair[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Version)5327_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Versions.Version)",
        "numberOfBytes": "32",
        "value": "t_struct(Version)5327_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1574_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1573,
            "contract": "contracts/Projects/Seeded.sol:SeededProject",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)5336_storage": {
        "encoding": "inplace",
        "label": "struct Versions.Set",
        "members": [
          {
            "astId": 5330,
            "contract": "contracts/Projects/Seeded.sol:SeededProject",
            "label": "labels",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 5335,
            "contract": "contracts/Projects/Seeded.sol:SeededProject",
            "label": "versions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_struct(Version)5327_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UrlHashPair)5318_storage": {
        "encoding": "inplace",
        "label": "struct Versions.UrlHashPair",
        "members": [
          {
            "astId": 5315,
            "contract": "contracts/Projects/Seeded.sol:SeededProject",
            "label": "url",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5317,
            "contract": "contracts/Projects/Seeded.sol:SeededProject",
            "label": "sha256hash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Version)5327_storage": {
        "encoding": "inplace",
        "label": "struct Versions.Version",
        "members": [
          {
            "astId": 5322,
            "contract": "contracts/Projects/Seeded.sol:SeededProject",
            "label": "urls",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(UrlHashPair)5318_storage)dyn_storage"
          },
          {
            "astId": 5326,
            "contract": "contracts/Projects/Seeded.sol:SeededProject",
            "label": "label",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint8)3_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}