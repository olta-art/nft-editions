{
  "address": "0x0bEc046DDbA18894088Bf4130AbD8496b8dff154",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_implementations",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "implementation",
          "type": "uint8"
        }
      ],
      "name": "CreatedProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approval",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct ProjectCreator.creatorApproval[]",
          "name": "creators",
          "type": "tuple[]"
        }
      ],
      "name": "CreatorApprovalsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementationContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "implementation",
          "type": "uint8"
        }
      ],
      "name": "ImplemnetationAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "addImplementation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "url",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "sha256hash",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct Versions.UrlHashPair[]",
                  "name": "urls",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint8[3]",
                  "name": "label",
                  "type": "uint8[3]"
                }
              ],
              "internalType": "struct Versions.Version",
              "name": "version",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "editionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royaltyBPS",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProjectCreator.ProjectData",
          "name": "projectData",
          "type": "tuple"
        },
        {
          "internalType": "uint8",
          "name": "implementation",
          "type": "uint8"
        }
      ],
      "name": "createProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "implementation",
          "type": "uint8"
        }
      ],
      "name": "getProjectAtId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "implementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approval",
              "type": "bool"
            }
          ],
          "internalType": "struct ProjectCreator.creatorApproval[]",
          "name": "creators",
          "type": "tuple[]"
        }
      ],
      "name": "setCreatorApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdabd784801c665430df1cad8c15e903a39fdea67312e72fffcce1074be224e51",
  "receipt": {
    "to": null,
    "from": "0x5f0009F23251fEB0f58c8e3aAb8E096Af16FaECD",
    "contractAddress": "0x0bEc046DDbA18894088Bf4130AbD8496b8dff154",
    "transactionIndex": 5,
    "gasUsed": "980179",
    "logsBloom": "0x0000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000080000000000000000000010000000000400000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000008000000000000000000020000000000000000000000000000000000000000000000000000000000000c000000000000000000001000000000000000000000000000000100040000000000000000000000000000000000000000000000000000000000000010000100000",
    "blockHash": "0x24dab2ea9aaad839d7dc46262cf80754b915e59ae0fe9ec57b742d9fb9630886",
    "transactionHash": "0xdabd784801c665430df1cad8c15e903a39fdea67312e72fffcce1074be224e51",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27029146,
        "transactionHash": "0xdabd784801c665430df1cad8c15e903a39fdea67312e72fffcce1074be224e51",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f0009f23251feb0f58c8e3aab8e096af16faecd",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000794cd3776b4d3a0000000000000000000000000000000000000000000000001a731404f50662cf000000000000000000000000000000000000000000001d0961eccc0004f2d40d00000000000000000000000000000000000000000000000019f9c7317d9b1595000000000000000000000000000000000000000000001d09626618d37c5e2147",
        "logIndex": 14,
        "blockHash": "0x24dab2ea9aaad839d7dc46262cf80754b915e59ae0fe9ec57b742d9fb9630886"
      }
    ],
    "blockNumber": 27029146,
    "cumulativeGasUsed": "1820322",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x4a84498e3FA553c14a4EDA77159141270C65650e",
      "0x68fB534dEb2f592C3025a9Ad448A16A3F9A41b58"
    ]
  ],
  "solcInputHash": "d06f5f4b79ec3b175bd8784a69dabb71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_implementations\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"name\":\"CreatedProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct ProjectCreator.creatorApproval[]\",\"name\":\"creators\",\"type\":\"tuple[]\"}],\"name\":\"CreatorApprovalsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementationContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"name\":\"ImplemnetationAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"addImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"sha256hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Versions.UrlHashPair[]\",\"name\":\"urls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct Versions.Version\",\"name\":\"version\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBPS\",\"type\":\"uint256\"}],\"internalType\":\"struct ProjectCreator.ProjectData\",\"name\":\"projectData\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"name\":\"createProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"implementation\",\"type\":\"uint8\"}],\"name\":\"getProjectAtId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"implementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approval\",\"type\":\"bool\"}],\"internalType\":\"struct ProjectCreator.creatorApproval[]\",\"name\":\"creators\",\"type\":\"tuple[]\"}],\"name\":\"setCreatorApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CreatedProject(uint256,address,uint256,address,uint8)\":{\"params\":{\"projectId\":\"ID of newly created edition\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_implementations\":\"Array of addresse for implementations of SingleEditionMintable like contracts to clone\"}},\"createProject((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)\":{\"params\":{\"implementation\":\"Implementation of the project contract\",\"projectData\":\"the data of the of the project being created\"}},\"getProjectAtId(uint256,uint8)\":{\"params\":{\"projectId\":\"id of the project to get\"},\"returns\":{\"_0\":\"project the contract of the project\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CreatedProject(uint256,address,uint256,address,uint8)\":{\"notice\":\"Emitted when a project is created reserving the corresponding token IDs.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes factory with address of implementations logic\"},\"createProject((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)\":{\"notice\":\"Creates a new edition contract as a factory with a deterministic address\"},\"getProjectAtId(uint256,uint8)\":{\"notice\":\"Get project given the created ID\"},\"implementations(uint256)\":{\"notice\":\"Address for implementation of SingleEditionMintable to clone\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProjectCreator.sol\":\"ProjectCreator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf4059b28b9d7c342804d33b16ea30c65ca6afd560e426b44ca727a0343c04c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"contracts/ProjectCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\nimport {ClonesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\n\\ninterface IProject {\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        Versions.Version memory _version,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS\\n    ) external;\\n}\\n\\ncontract ProjectCreator {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Important: None of these fields can be changed after calling\\n    /// urls can be updated and upgraded via the versions interface\\n    struct ProjectData {\\n        string name; // Name of the edition contract\\n        string symbol; // Symbol of the edition contract\\n        string description; /// Metadata: Description of the edition entry\\n        Versions.Version version; /// Version media with animation url, animation sha256hash, image url, image sha256hash\\n        uint256 editionSize; /// Total size of the edition (number of possible editions)\\n        uint256 royaltyBPS; /// BPS amount of royalty\\n    }\\n\\n    struct creatorApproval {\\n        address id;\\n        bool approval;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only owner can call this function.\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreator {\\n        require(creatorApprovals[address(0)] || creatorApprovals[msg.sender], \\\"Only approved creators can call this function.\\\");\\n        _;\\n    }\\n\\n    address public owner;\\n\\n    mapping(address => bool) private creatorApprovals;\\n\\n    /// Counter for current contract id upgraded\\n    mapping(uint8 => CountersUpgradeable.Counter) private atContracts;\\n\\n    /// Address for implementation of SingleEditionMintable to clone\\n    address[] public implementations;\\n\\n    /// Initializes factory with address of implementations logic\\n    /// @param _implementations Array of addresse for implementations of SingleEditionMintable like contracts to clone\\n    constructor(address[] memory _implementations) {\\n        owner = address(msg.sender);\\n        for (uint8 i = 0; i < _implementations.length; i++) {\\n            implementations.push(_implementations[i]);\\n            atContracts[i] = CountersUpgradeable.Counter(0);\\n        }\\n\\n        // set creator approval for owner\\n        creatorApprovals[address(msg.sender)] = true;\\n    }\\n\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// @param projectData the data of the of the project being created\\n    /// @param implementation Implementation of the project contract\\n    function createProject(\\n        ProjectData memory projectData,\\n        uint8 implementation\\n    )\\n        external\\n        onlyCreator\\n        returns (uint256)\\n    {\\n        require(implementations.length > implementation, \\\"implementation does not exist\\\");\\n\\n        uint256 newId = atContracts[implementation].current();\\n        address newContract = ClonesUpgradeable.cloneDeterministic(\\n            implementations[implementation],\\n            bytes32(abi.encodePacked(newId))\\n        );\\n\\n        IProject(newContract).initialize(\\n            msg.sender,\\n            projectData.name,\\n            projectData.symbol,\\n            projectData.description,\\n            projectData.version,\\n            projectData.editionSize,\\n            projectData.royaltyBPS\\n        );\\n\\n        emit CreatedProject(\\n            newId,\\n            msg.sender,\\n            projectData.editionSize,\\n            newContract,\\n            implementation\\n        );\\n\\n        // increment for the next contract creation call\\n        atContracts[implementation].increment();\\n\\n        return newId;\\n    }\\n\\n    /// Get project given the created ID\\n    /// @param projectId id of the project to get\\n    /// @return project the contract of the project\\n    function getProjectAtId(uint256 projectId, uint8 implementation)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return\\n            ClonesUpgradeable.predictDeterministicAddress(\\n                implementations[implementation],\\n                bytes32(abi.encodePacked(projectId)),\\n                address(this)\\n            );\\n    }\\n\\n    function addImplementation(address implementation)\\n        external\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        // initilize counter for implementation\\n        atContracts[uint8(implementations.length)] = CountersUpgradeable.Counter(0);\\n        // add implementation to clonable implementations\\n        implementations.push(implementation);\\n\\n        emit ImplemnetationAdded(\\n            implementation,\\n            uint8(implementations.length - 1)\\n        );\\n\\n        return implementations.length;\\n    }\\n\\n    function setCreatorApprovals(creatorApproval[] memory creators)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < creators.length; i++) {\\n            creatorApprovals[creators[i].id] = creators[i].approval;\\n        }\\n\\n        emit CreatorApprovalsUpdated(creators);\\n    }\\n\\n    event CreatorApprovalsUpdated (\\n        creatorApproval[] creators\\n    );\\n\\n    event ImplemnetationAdded(\\n        address indexed implementationContractAddress,\\n        uint8 implementation\\n    );\\n\\n    /// Emitted when a project is created reserving the corresponding token IDs.\\n    /// @param projectId ID of newly created edition\\n    event CreatedProject(\\n        uint256 indexed projectId,\\n        address indexed creator,\\n        uint256 editionSize,\\n        address project,\\n        uint8 implementation\\n    );\\n}\\n\",\"keccak256\":\"0x0ae64fbaba27043e74b9672cea8c9a4c25cef5571c912a68542e1d0f00329153\",\"license\":\"GPL-3.0\"},\"contracts/Versions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n/*\\n    please note this is work in progress and not ready for production just yet\\n*/\\n\\n/**\\n @title A libary for versioning of NFT content and metadata\\n @dev Provides versioning for nft content and follows the semantic labeling convention.\\n Each version contains an array of content and content hash pairs as well as a version label.\\n Versions can be added and urls can be updated along with getters to retrieve specific versions and history.\\n\\n Include with `using Versions for Versions.set;`\\n @author george baldwin\\n */\\nlibrary Versions {\\n\\n    struct UrlHashPair {\\n        string url;\\n        bytes32 sha256hash;\\n    }\\n\\n    struct Version {\\n        UrlHashPair[] urls;\\n        uint8[3] label;\\n    }\\n\\n    struct Set {\\n        string[] labels;\\n        mapping(string => Version) versions;\\n    }\\n\\n    /**\\n     @dev creates a new version from array of url hashe pairs and a semantic label\\n     @param urls An array of urls with sha-256 hash of the content on that url\\n     @param label a version label in a semantic style\\n     */\\n    function createVersion(\\n        UrlHashPair[] memory urls,\\n        uint8[3] memory label\\n    )\\n        internal\\n        pure\\n        returns (Version memory)\\n    {\\n        Version memory version = Version(urls, label);\\n        return version;\\n    }\\n\\n    /**\\n     @dev adds a version to a given set by pushing the version label to an array\\n        and mapping the version to a string of that label. Will revert if the label already exists.\\n     @param set the set to add the version to\\n     @param version the version that will be stored\\n     */\\n    function addVersion(\\n        Set storage set,\\n        Version memory version\\n    ) internal {\\n\\n        string memory labelKey = uintArray3ToString(version.label);\\n\\n        require(\\n            set.versions[labelKey].urls.length == 0,\\n            \\\"#Versions: A version with that label already exists\\\"\\n        );\\n\\n        // add to labels array\\n        set.labels.push(labelKey);\\n\\n        // store urls and hashes in mapping\\n        for (uint256 i = 0; i < version.urls.length; i++){\\n            set.versions[labelKey].urls.push(version.urls[i]);\\n        }\\n\\n        // store label\\n        set.versions[labelKey].label = version.label;\\n    }\\n\\n    /**\\n     @dev gets a version from a given set. Will revert if the version doesn't exist.\\n     @param set The set to get the version from\\n     @param label The label of the requested version\\n     @return version The version corrosponeding to the label\\n     */\\n    function getVersion(\\n        Set storage set,\\n        uint8[3] memory label\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        Version memory version = set.versions[uintArray3ToString(label)];\\n        require(\\n            version.urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        return version;\\n    }\\n\\n    /**\\n     @dev updates a url of a given version in a given set\\n     @param set The set containing the version of which the url will be updated\\n     @param label The label of the requested version\\n     @param index The index of the url\\n     @param newUrl The new url to be updated to\\n     */\\n    function updateVersionURL(\\n        Set storage set,\\n        uint8[3] memory label,\\n        uint256 index,\\n        string memory newUrl\\n    ) internal {\\n        string memory labelKey = uintArray3ToString(label);\\n        require(\\n            set.versions[labelKey].urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        require(\\n            set.versions[labelKey].urls.length > index,\\n            \\\"#Versions: The url does not exist on that version\\\"\\n        );\\n        set.versions[labelKey].urls[index].url = newUrl;\\n    }\\n\\n    /**\\n     @dev gets all the version labels of a given set\\n     @param set The set containing the versions\\n     @return labels an array of labels as strings\\n    */\\n    function getAllLabels(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return set.labels;\\n    }\\n\\n    /**\\n     @dev gets all the versions of a given set\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getAllVersions(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        return getVersionsFromLabels(set, set.labels);\\n    }\\n\\n    /**\\n     @dev gets the versions of a given array of labels as strings, reverts if no labels are given\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getVersionsFromLabels(\\n        Set storage set,\\n        string[] memory _labels\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        require(_labels.length != 0, \\\"#Versions: No labels provided\\\");\\n        Version[] memory versionArray = new Version[](_labels.length);\\n\\n        for (uint256 i = 0; i < _labels.length; i++) {\\n                versionArray[i] = set.versions[_labels[i]];\\n        }\\n\\n        return versionArray;\\n    }\\n\\n    /**\\n     @dev gets the last added version of a given set, reverts if no versions are in the set\\n     @param set The set containing the versions\\n     @return version the last added version\\n    */\\n    function getLatestVersion(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        require(\\n            set.labels.length != 0,\\n            \\\"#Versions: No versions exist\\\"\\n        );\\n        return set.versions[\\n            set.labels[set.labels.length - 1]\\n        ];\\n    }\\n\\n    /**\\n     @dev A helper function to convert a three length array of numbers into a semantic style verison label\\n     @param label the label as a uint8[3] array\\n     @return label the label as a string\\n    */\\n    function uintArray3ToString (uint8[3] memory label)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(\\n            StringsUpgradeable.toString(label[0]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[1]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[2])\\n        ));\\n    }\\n}\",\"keccak256\":\"0xf7270873b91a27889da96834faf1bf461d3f5f7a7deaa1f1269d949d534c3ee2\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010dc380380620010dc83398101604081905262000034916200011d565b600080546001600160a01b031916331781555b81518160ff161015620000db576003828260ff16815181106200006e576200006e62000225565b602090810291909101810151825460018101845560009384528284200180546001600160a01b0319166001600160a01b0390921691909117905560408051808301825283815260ff8516845260029092529091209051905580620000d281620001f6565b91505062000047565b5050336000908152600160208190526040909120805460ff1916909117905562000251565b80516001600160a01b03811681146200011857600080fd5b919050565b600060208083850312156200013157600080fd5b82516001600160401b03808211156200014957600080fd5b818501915085601f8301126200015e57600080fd5b8151818111156200017357620001736200023b565b8060051b604051601f19603f830116810181811085821117156200019b576200019b6200023b565b604052828152858101935084860182860187018a1015620001bb57600080fd5b600095505b83861015620001e957620001d48162000100565b855260019590950194938601938601620001c0565b5098975050505050505050565b600060ff821660ff8114156200021c57634e487b7160e01b600052601160045260246000fd5b60010192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610e7b80620002616000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80633922fe501461006757806362ad270514610097578063845affc8146100ac5780638da5cb5b146100bf578063a34bda4d146100d2578063c6e2a400146100f3575b600080fd5b61007a610075366004610ae6565b610106565b6040516001600160a01b0390911681526020015b60405180910390f35b6100aa6100a5366004610900565b6101c1565b005b61007a6100ba366004610acd565b6102b4565b60005461007a906001600160a01b031681565b6100e56100e03660046109ce565b6102de565b60405190815260200161008e565b6100e56101013660046108e5565b61053d565b60006101b860038360ff168154811061012157610121610e19565b600091825260209182902001546040805180840188905281518082039094018452810190526001600160a01b03169061015990610dc1565b30604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b90505b92915050565b6000546001600160a01b031633146101f45760405162461bcd60e51b81526004016101eb90610ccb565b60405180910390fd5b60005b81518110156102795781818151811061021257610212610e19565b6020026020010151602001516001600084848151811061023457610234610e19565b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061027181610de8565b9150506101f7565b507f925382464b1217f3ef37d73d9d6cc7cb9b15ac584659265066e9d70c32915926816040516102a99190610c71565b60405180910390a150565b600381815481106102c457600080fd5b6000918252602090912001546001600160a01b0316905081565b600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495460ff168061032757503360009081526001602052604090205460ff165b61038a5760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920617070726f7665642063726561746f72732063616e2063616c6c2060448201526d3a3434b990333ab731ba34b7b71760911b60648201526084016101eb565b60035460ff8316106103de5760405162461bcd60e51b815260206004820152601d60248201527f696d706c656d656e746174696f6e20646f6573206e6f7420657869737400000060448201526064016101eb565b60ff821660008181526002602052604081205460038054919361044692811061040957610409610e19565b600091825260209182902001546040805180840187905281518082039094018452810190526001600160a01b03169061044190610dc1565b610628565b9050806001600160a01b03166313d2de32338760000151886020015189604001518a606001518b608001518c60a001516040518863ffffffff1660e01b81526004016104989796959493929190610b82565b600060405180830381600087803b1580156104b257600080fd5b505af11580156104c6573d6000803e3d6000fd5b505050506080850151604080519182526001600160a01b038316602083015260ff86168282015251339184917f7a938c735832c3f3357e2f3f107c4bf632b92eb414b872ab1cbf8e53be5f41f59181900360600190a360ff8416600090815260026020526040902080546001019055509392505050565b600080546001600160a01b031633146105685760405162461bcd60e51b81526004016101eb90610ccb565b604080516020808201835260008083526003805460ff16825260029092529283209151909155805460018082018355928290527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b038616908117909155905490917f95546fd920b865e62727445387bac34d14a95020d23f5246361fda7a7e41a536916106099190610daa565b60405160ff909116815260200160405180910390a2506003545b919050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166101bb5760405162461bcd60e51b8152602060048201526017602482015276115490cc4c4d8dce8818dc99585d194c8819985a5b1959604a1b60448201526064016101eb565b80356001600160a01b038116811461062357600080fd5b600082601f8301126106ea57600080fd5b604051606081018181106001600160401b038211171561070c5761070c610e2f565b60405280836060810186101561072157600080fd5b60005b600381101561074b57610736826108d4565b83526020928301929190910190600101610724565b509195945050505050565b600082601f83011261076757600080fd5b81356001600160401b0381111561078057610780610e2f565b610793601f8201601f1916602001610d57565b8181528460208386010111156107a857600080fd5b816020850160208301376000918101602001919091529392505050565b6000608082840312156107d757600080fd5b6107df610d0d565b905081356001600160401b03808211156107f857600080fd5b818401915084601f83011261080c57600080fd5b8135602061082161081c83610d87565b610d57565b80838252828201915082860189848660051b890101111561084157600080fd5b60005b858110156108b55781358781111561085b57600080fd5b88016040818d03601f190181131561087257600080fd5b61087a610d0d565b878301358a81111561088b57600080fd5b6108998f8a83870101610756565b8252509101358682015284529284019290840190600101610844565b50508652506108c6878783016106d9565b818601525050505092915050565b803560ff8116811461062357600080fd5b6000602082840312156108f757600080fd5b6101b8826106c2565b6000602080838503121561091357600080fd5b82356001600160401b0381111561092957600080fd5b8301601f8101851361093a57600080fd5b803561094861081c82610d87565b80828252848201915084840188868560061b870101111561096857600080fd5b600094505b838510156109c257604080828b03121561098657600080fd5b61098e610d0d565b610997836106c2565b81528783013580151581146109ab57600080fd5b81890152845260019590950194928601920161096d565b50979650505050505050565b600080604083850312156109e157600080fd5b82356001600160401b03808211156109f857600080fd5b9084019060c08287031215610a0c57600080fd5b610a14610d35565b823582811115610a2357600080fd5b610a2f88828601610756565b825250602083013582811115610a4457600080fd5b610a5088828601610756565b602083015250604083013582811115610a6857600080fd5b610a7488828601610756565b604083015250606083013582811115610a8c57600080fd5b610a98888286016107c5565b6060830152506080830135608082015260a083013560a0820152809450505050610ac4602084016108d4565b90509250929050565b600060208284031215610adf57600080fd5b5035919050565b60008060408385031215610af957600080fd5b82359150610ac4602084016108d4565b8060005b6003811015610b2f57815160ff16845260209384019390910190600101610b0d565b50505050565b6000815180845260005b81811015610b5b57602081850181015186830182015201610b3f565b81811115610b6d576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038816815260e06020808301829052600091610ba79084018a610b35565b604084820381860152610bba828b610b35565b91508482036060860152610bce828a610b35565b915084820360808601526080820188516080845281815180845260a08601915060a08160051b8701019350868301925060005b81811015610c4257868503609f1901835283518051878752610c2588880182610b35565b918a0151968a019690965294509287019291870191600101610c01565b50505050838901519150610c5884840183610b09565b60a08601979097525050505060c0015295945050505050565b602080825282518282018190526000919060409081850190868401855b82811015610cbe57815180516001600160a01b031685528601511515868501529284019290850190600101610c8e565b5091979650505050505050565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604082015261371760f11b606082015260800190565b604080519081016001600160401b0381118282101715610d2f57610d2f610e2f565b60405290565b60405160c081016001600160401b0381118282101715610d2f57610d2f610e2f565b604051601f8201601f191681016001600160401b0381118282101715610d7f57610d7f610e2f565b604052919050565b60006001600160401b03821115610da057610da0610e2f565b5060051b60200190565b600082821015610dbc57610dbc610e03565b500390565b80516020808301519190811015610de2576000198160200360031b1b821691505b50919050565b6000600019821415610dfc57610dfc610e03565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a33101aab72efd7db8f859364ea8c671a366e9e1ea0201a1f73b7a3106dcc7ee64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80633922fe501461006757806362ad270514610097578063845affc8146100ac5780638da5cb5b146100bf578063a34bda4d146100d2578063c6e2a400146100f3575b600080fd5b61007a610075366004610ae6565b610106565b6040516001600160a01b0390911681526020015b60405180910390f35b6100aa6100a5366004610900565b6101c1565b005b61007a6100ba366004610acd565b6102b4565b60005461007a906001600160a01b031681565b6100e56100e03660046109ce565b6102de565b60405190815260200161008e565b6100e56101013660046108e5565b61053d565b60006101b860038360ff168154811061012157610121610e19565b600091825260209182902001546040805180840188905281518082039094018452810190526001600160a01b03169061015990610dc1565b30604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b90505b92915050565b6000546001600160a01b031633146101f45760405162461bcd60e51b81526004016101eb90610ccb565b60405180910390fd5b60005b81518110156102795781818151811061021257610212610e19565b6020026020010151602001516001600084848151811061023457610234610e19565b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061027181610de8565b9150506101f7565b507f925382464b1217f3ef37d73d9d6cc7cb9b15ac584659265066e9d70c32915926816040516102a99190610c71565b60405180910390a150565b600381815481106102c457600080fd5b6000918252602090912001546001600160a01b0316905081565b600080805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb495460ff168061032757503360009081526001602052604090205460ff165b61038a5760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c7920617070726f7665642063726561746f72732063616e2063616c6c2060448201526d3a3434b990333ab731ba34b7b71760911b60648201526084016101eb565b60035460ff8316106103de5760405162461bcd60e51b815260206004820152601d60248201527f696d706c656d656e746174696f6e20646f6573206e6f7420657869737400000060448201526064016101eb565b60ff821660008181526002602052604081205460038054919361044692811061040957610409610e19565b600091825260209182902001546040805180840187905281518082039094018452810190526001600160a01b03169061044190610dc1565b610628565b9050806001600160a01b03166313d2de32338760000151886020015189604001518a606001518b608001518c60a001516040518863ffffffff1660e01b81526004016104989796959493929190610b82565b600060405180830381600087803b1580156104b257600080fd5b505af11580156104c6573d6000803e3d6000fd5b505050506080850151604080519182526001600160a01b038316602083015260ff86168282015251339184917f7a938c735832c3f3357e2f3f107c4bf632b92eb414b872ab1cbf8e53be5f41f59181900360600190a360ff8416600090815260026020526040902080546001019055509392505050565b600080546001600160a01b031633146105685760405162461bcd60e51b81526004016101eb90610ccb565b604080516020808201835260008083526003805460ff16825260029092529283209151909155805460018082018355928290527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b038616908117909155905490917f95546fd920b865e62727445387bac34d14a95020d23f5246361fda7a7e41a536916106099190610daa565b60405160ff909116815260200160405180910390a2506003545b919050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528360601b60148201526e5af43d82803e903d91602b57fd5bf360881b6028820152826037826000f59150506001600160a01b0381166101bb5760405162461bcd60e51b8152602060048201526017602482015276115490cc4c4d8dce8818dc99585d194c8819985a5b1959604a1b60448201526064016101eb565b80356001600160a01b038116811461062357600080fd5b600082601f8301126106ea57600080fd5b604051606081018181106001600160401b038211171561070c5761070c610e2f565b60405280836060810186101561072157600080fd5b60005b600381101561074b57610736826108d4565b83526020928301929190910190600101610724565b509195945050505050565b600082601f83011261076757600080fd5b81356001600160401b0381111561078057610780610e2f565b610793601f8201601f1916602001610d57565b8181528460208386010111156107a857600080fd5b816020850160208301376000918101602001919091529392505050565b6000608082840312156107d757600080fd5b6107df610d0d565b905081356001600160401b03808211156107f857600080fd5b818401915084601f83011261080c57600080fd5b8135602061082161081c83610d87565b610d57565b80838252828201915082860189848660051b890101111561084157600080fd5b60005b858110156108b55781358781111561085b57600080fd5b88016040818d03601f190181131561087257600080fd5b61087a610d0d565b878301358a81111561088b57600080fd5b6108998f8a83870101610756565b8252509101358682015284529284019290840190600101610844565b50508652506108c6878783016106d9565b818601525050505092915050565b803560ff8116811461062357600080fd5b6000602082840312156108f757600080fd5b6101b8826106c2565b6000602080838503121561091357600080fd5b82356001600160401b0381111561092957600080fd5b8301601f8101851361093a57600080fd5b803561094861081c82610d87565b80828252848201915084840188868560061b870101111561096857600080fd5b600094505b838510156109c257604080828b03121561098657600080fd5b61098e610d0d565b610997836106c2565b81528783013580151581146109ab57600080fd5b81890152845260019590950194928601920161096d565b50979650505050505050565b600080604083850312156109e157600080fd5b82356001600160401b03808211156109f857600080fd5b9084019060c08287031215610a0c57600080fd5b610a14610d35565b823582811115610a2357600080fd5b610a2f88828601610756565b825250602083013582811115610a4457600080fd5b610a5088828601610756565b602083015250604083013582811115610a6857600080fd5b610a7488828601610756565b604083015250606083013582811115610a8c57600080fd5b610a98888286016107c5565b6060830152506080830135608082015260a083013560a0820152809450505050610ac4602084016108d4565b90509250929050565b600060208284031215610adf57600080fd5b5035919050565b60008060408385031215610af957600080fd5b82359150610ac4602084016108d4565b8060005b6003811015610b2f57815160ff16845260209384019390910190600101610b0d565b50505050565b6000815180845260005b81811015610b5b57602081850181015186830182015201610b3f565b81811115610b6d576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038816815260e06020808301829052600091610ba79084018a610b35565b604084820381860152610bba828b610b35565b91508482036060860152610bce828a610b35565b915084820360808601526080820188516080845281815180845260a08601915060a08160051b8701019350868301925060005b81811015610c4257868503609f1901835283518051878752610c2588880182610b35565b918a0151968a019690965294509287019291870191600101610c01565b50505050838901519150610c5884840183610b09565b60a08601979097525050505060c0015295945050505050565b602080825282518282018190526000919060409081850190868401855b82811015610cbe57815180516001600160a01b031685528601511515868501529284019290850190600101610c8e565b5091979650505050505050565b60208082526022908201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f604082015261371760f11b606082015260800190565b604080519081016001600160401b0381118282101715610d2f57610d2f610e2f565b60405290565b60405160c081016001600160401b0381118282101715610d2f57610d2f610e2f565b604051601f8201601f191681016001600160401b0381118282101715610d7f57610d7f610e2f565b604052919050565b60006001600160401b03821115610da057610da0610e2f565b5060051b60200190565b600082821015610dbc57610dbc610e03565b500390565b80516020808301519190811015610de2576000198160200360031b1b821691505b50919050565b6000600019821415610dfc57610dfc610e03565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a33101aab72efd7db8f859364ea8c671a366e9e1ea0201a1f73b7a3106dcc7ee64736f6c63430008060033",
  "devdoc": {
    "events": {
      "CreatedProject(uint256,address,uint256,address,uint8)": {
        "params": {
          "projectId": "ID of newly created edition"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_implementations": "Array of addresse for implementations of SingleEditionMintable like contracts to clone"
        }
      },
      "createProject((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)": {
        "params": {
          "implementation": "Implementation of the project contract",
          "projectData": "the data of the of the project being created"
        }
      },
      "getProjectAtId(uint256,uint8)": {
        "params": {
          "projectId": "id of the project to get"
        },
        "returns": {
          "_0": "project the contract of the project"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatedProject(uint256,address,uint256,address,uint8)": {
        "notice": "Emitted when a project is created reserving the corresponding token IDs."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes factory with address of implementations logic"
      },
      "createProject((string,string,string,((string,bytes32)[],uint8[3]),uint256,uint256),uint8)": {
        "notice": "Creates a new edition contract as a factory with a deterministic address"
      },
      "getProjectAtId(uint256,uint8)": {
        "notice": "Get project given the created ID"
      },
      "implementations(uint256)": {
        "notice": "Address for implementation of SingleEditionMintable to clone"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2067,
        "contract": "contracts/ProjectCreator.sol:ProjectCreator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2071,
        "contract": "contracts/ProjectCreator.sol:ProjectCreator",
        "label": "creatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2077,
        "contract": "contracts/ProjectCreator.sol:ProjectCreator",
        "label": "atContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_struct(Counter)1574_storage)"
      },
      {
        "astId": 2081,
        "contract": "contracts/ProjectCreator.sol:ProjectCreator",
        "label": "implementations",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_struct(Counter)1574_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1574_storage"
      },
      "t_struct(Counter)1574_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1573,
            "contract": "contracts/ProjectCreator.sol:ProjectCreator",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}