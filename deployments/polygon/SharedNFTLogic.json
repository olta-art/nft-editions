{
  "address": "0x92419d3c2ce2EF407F8705cf1A85b131bBcebf01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "animationUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "animationUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "unencoded",
          "type": "bytes"
        }
      ],
      "name": "base64Encode",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "patchNotesUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenSeed",
          "type": "uint256"
        }
      ],
      "name": "createMetadataEdition",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "patchNotesUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "createMetadataEdition",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mediaData",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "editionSize",
          "type": "uint256"
        }
      ],
      "name": "createMetadataJSON",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "json",
          "type": "bytes"
        }
      ],
      "name": "encodeMetadataJSON",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "imageUrl",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "numberToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "patchNotesUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenSeed",
          "type": "uint256"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "patchNotesUrl",
              "type": "string"
            },
            {
              "internalType": "uint8[3]",
              "name": "label",
              "type": "uint8[3]"
            }
          ],
          "internalType": "struct MediaData",
          "name": "media",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenOfEdition",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tokenMediaData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "label",
          "type": "uint8[3]"
        }
      ],
      "name": "uintArray3ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[3]",
          "name": "label",
          "type": "uint8[3]"
        },
        {
          "internalType": "string",
          "name": "patchNotesUrl",
          "type": "string"
        }
      ],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x814086803279e391b34ae0345b4169bc6c40da7e02c7be649fffec94ac7272d1",
  "receipt": {
    "to": null,
    "from": "0x5712869b7C8ca52B00Af7F6D924D4C841781ccd4",
    "contractAddress": "0x92419d3c2ce2EF407F8705cf1A85b131bBcebf01",
    "transactionIndex": 13,
    "gasUsed": "1320925",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000008000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080004000000000000100000000000000000000008000000000040000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x8de8332ac83e9395c282141eb8b3c24df5adaef54b21278fcb7472dabba6c6b2",
    "transactionHash": "0x814086803279e391b34ae0345b4169bc6c40da7e02c7be649fffec94ac7272d1",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 30941615,
        "transactionHash": "0x814086803279e391b34ae0345b4169bc6c40da7e02c7be649fffec94ac7272d1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005712869b7c8ca52b00af7f6d924d4c841781ccd4",
          "0x00000000000000000000000000856730088a5c3191bd26eb482e45229555ce57"
        ],
        "data": "0x000000000000000000000000000000000000000000000000015fda0a4e54a5b300000000000000000000000000000000000000000000001f88a007ab93ef93b000000000000000000000000000000000000000000000039f9e401ef6c19a1c9000000000000000000000000000000000000000000000001f87402da1459aedfd00000000000000000000000000000000000000000000039f9f9ff9010feec243",
        "logIndex": 37,
        "blockHash": "0x8de8332ac83e9395c282141eb8b3c24df5adaef54b21278fcb7472dabba6c6b2"
      }
    ],
    "blockNumber": 30941615,
    "cumulativeGasUsed": "3567747",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f1085c5b85cb82252ad324af67a4fa4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"animationUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"animationUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"unencoded\",\"type\":\"bytes\"}],\"name\":\"base64Encode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patchNotesUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSeed\",\"type\":\"uint256\"}],\"name\":\"createMetadataEdition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patchNotesUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"createMetadataEdition\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mediaData\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"}],\"name\":\"createMetadataJSON\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"json\",\"type\":\"bytes\"}],\"name\":\"encodeMetadataJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"imageUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"numberToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patchNotesUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSeed\",\"type\":\"uint256\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"patchNotesUrl\",\"type\":\"string\"},{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"internalType\":\"struct MediaData\",\"name\":\"media\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenOfEdition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenMediaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"}],\"name\":\"uintArray3ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[3]\",\"name\":\"label\",\"type\":\"uint8[3]\"},{\"internalType\":\"string\",\"name\":\"patchNotesUrl\",\"type\":\"string\"}],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Can safely be used for generic base64Encode and numberToString functions\",\"kind\":\"dev\",\"methods\":{\"addressToString(address)\":{\"params\":{\"_address\":\"address to return as a string\"}},\"base64Encode(bytes)\":{\"params\":{\"unencoded\":\"bytes to base64-encode\"}},\"createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"media\":\"The image Url, animation Url and version label of the media to be rendered\",\"name\":\"Name of NFT in metadata\",\"tokenAddress\":\"Address of the NFT\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address,uint256)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"media\":\"The image Url, animation Url and version label of the media to be rendered\",\"name\":\"Name of NFT in metadata\",\"tokenAddress\":\"Address of the NFT\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"params\":{\"description\":\"Description of NFT in metadata\",\"editionSize\":\"Size of entire edition to show\",\"mediaData\":\"Data for media to include in json object\",\"name\":\"Name of NFT in metadata\",\"tokenOfEdition\":\"Token ID for specific token\"}},\"encodeMetadataJSON(bytes)\":{\"params\":{\"json\":\"Raw json to base64 and turn into a data-uri\"}},\"numberToString(uint256)\":{\"params\":{\"value\":\"number to return as a string\"}},\"tokenMediaData((string,string,string,uint8[3]),uint256,address)\":{\"params\":{\"media\":\"urls of image and animation media with version label\"}},\"tokenMediaData((string,string,string,uint8[3]),uint256,address,uint256)\":{\"params\":{\"media\":\"urls of image and animation media with version label\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressToString(address)\":{\"notice\":\"converts address to string\"},\"createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address)\":{\"notice\":\"Generate edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address,uint256)\":{\"notice\":\"Generate edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"createMetadataJSON(string,string,string,uint256,uint256)\":{\"notice\":\"Function to create the metadata json string for the nft edition\"},\"encodeMetadataJSON(bytes)\":{\"notice\":\"Encodes the argument json bytes into base64-data uri format\"},\"numberToString(uint256)\":{\"notice\":\"Proxy to openzeppelin's toString function\"},\"tokenMediaData((string,string,string,uint8[3]),uint256,address)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata\"},\"tokenMediaData((string,string,string,uint8[3]),uint256,address,uint256)\":{\"notice\":\"Generates edition metadata from storage information as base64-json blob Combines the media data and metadata\"}},\"notice\":\"Shared NFT logic for rendering metadata associated with editions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SharedNFTLogic.sol\":\"SharedNFTLogic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xa5f156c261db1274830f5b64c64352a379555d3709780e0ab491491cd9e94566\",\"license\":\"GPL-3.0\"},\"contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\nimport {Versions} from \\\"./Versions.sol\\\";\\n\\nstruct MediaData{\\n    string imageUrl;\\n    string animationUrl;\\n    string patchNotesUrl;\\n    uint8[3] label;\\n}\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// @notice converts address to string\\n    /// @param _address address to return as a string\\n    function addressToString(address _address) public pure returns(string memory) {\\n        bytes20 _bytes = bytes20(_address);\\n        bytes memory HEX = \\\"0123456789abcdef\\\";\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for(uint i = 0; i < 20; i++) {\\n            _string[2+i*2] = HEX[uint8(_bytes[i] >> 4)];\\n            _string[3+i*2] = HEX[uint8(_bytes[i] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    // Proxy to olta's uintArray3ToString function\\n    function uintArray3ToString (uint8[3] memory label)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return Versions.uintArray3ToString(label);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param media The image Url, animation Url and version label of the media to be rendered\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    /// @param tokenAddress Address of the NFT\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            media,\\n            tokenOfEdition,\\n            tokenAddress,\\n            tokenSeed\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenOfEdition\\n                        ),\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenOfEdition\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param media urls of image and animation media with version label\\n    function tokenMediaData(\\n        MediaData memory media,\\n        uint256 tokenOfEdition,\\n        address tokenAddress,\\n        uint256 tokenSeed\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(media.imageUrl).length > 0;\\n        bool hasAnimation = bytes(media.animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenSeed\\n                        ),\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress,\\n                            tokenSeed\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        imageUrl(\\n                            media.imageUrl,\\n                            tokenSeed\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        animationUrl(\\n                            media.animationUrl,\\n                            tokenOfEdition,\\n                            tokenAddress,\\n                            tokenSeed\\n                        ),\\n                        version(\\n                            media.label,\\n                            media.patchNotesUrl\\n                        )\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function version(\\n        uint8[3] memory label,\\n        string memory patchNotesUrl\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'media_version\\\": \\\"',\\n                uintArray3ToString(label),\\n                '\\\", \\\"'\\n                'patch_notes\\\": \\\"',\\n                patchNotesUrl,\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n\\n    function imageUrl(\\n        string memory url,\\n        uint256 id\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'image\\\": \\\"',\\n                url,\\n                 \\\"?id=\\\", // if just url \\\"/id\\\" this will work with arweave pathmanifests\\n                numberToString(id),\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n\\n    function animationUrl(\\n        string memory url,\\n        uint256 tokenId,\\n        address tokenAddress\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'animation_url\\\": \\\"',\\n                url,\\n                \\\"?id=\\\",\\n                numberToString(tokenId),\\n                \\\"&address=\\\",\\n                addressToString(tokenAddress),\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n\\n    function animationUrl(\\n        string memory url,\\n        uint256 tokenId,\\n        address tokenAddress,\\n        uint256 seed\\n    ) public pure returns (string memory) {\\n        return string (\\n            abi.encodePacked(\\n                'animation_url\\\": \\\"',\\n                url,\\n                \\\"?id=\\\",\\n                numberToString(tokenId),\\n                \\\"&address=\\\",\\n                addressToString(tokenAddress),\\n                \\\"&seed=\\\",\\n                numberToString(seed),\\n                '\\\", \\\"'\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3bef9ad370a8692aa93e18db235ef0ba3752bbb119de1d1a2a65bd7cf59d502a\",\"license\":\"GPL-3.0\"},\"contracts/Versions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\n/**\\n @title A libary for versioning of NFT content and metadata\\n @dev Provides versioning for nft content and follows the semantic labeling convention.\\n Each version contains an array of content and content hash pairs as well as a version label.\\n Versions can be added and urls can be updated along with getters to retrieve specific versions and history.\\n\\n Include with `using Versions for Versions.set;`\\n @author george baldwin\\n */\\n\\nlibrary Versions {\\n\\n    struct UrlHashPair {\\n        string url;\\n        bytes32 sha256hash;\\n    }\\n\\n    struct Version {\\n        UrlHashPair[] urls;\\n        uint8[3] label;\\n    }\\n\\n    struct Set {\\n        string[] labels;\\n        mapping(string => Version) versions;\\n    }\\n\\n    /**\\n     @dev creates a new version from array of url hashe pairs and a semantic label\\n     @param urls An array of urls with sha-256 hash of the content on that url\\n     @param label a version label in a semantic style\\n     */\\n    function createVersion(\\n        UrlHashPair[] memory urls,\\n        uint8[3] memory label\\n    )\\n        internal\\n        pure\\n        returns (Version memory)\\n    {\\n        Version memory version = Version(urls, label);\\n        return version;\\n    }\\n\\n    /**\\n     @dev adds a version to a given set by pushing the version label to an array\\n        and mapping the version to a string of that label. Will revert if the label already exists.\\n     @param set the set to add the version to\\n     @param version the version that will be stored\\n     */\\n    function addVersion(\\n        Set storage set,\\n        Version memory version\\n    ) internal {\\n\\n        string memory labelKey = uintArray3ToString(version.label);\\n\\n        require(\\n            set.versions[labelKey].urls.length == 0,\\n            \\\"#Versions: A version with that label already exists\\\"\\n        );\\n\\n        // add to labels array\\n        set.labels.push(labelKey);\\n\\n        // store urls and hashes in mapping\\n        for (uint256 i = 0; i < version.urls.length; i++){\\n            set.versions[labelKey].urls.push(version.urls[i]);\\n        }\\n\\n        // store label\\n        set.versions[labelKey].label = version.label;\\n    }\\n\\n    /**\\n     @dev gets a version from a given set. Will revert if the version doesn't exist.\\n     @param set The set to get the version from\\n     @param label The label of the requested version\\n     @return version The version corrosponeding to the label\\n     */\\n    function getVersion(\\n        Set storage set,\\n        uint8[3] memory label\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        Version memory version = set.versions[uintArray3ToString(label)];\\n        require(\\n            version.urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        return version;\\n    }\\n\\n    /**\\n     @dev updates a url of a given version in a given set\\n     @param set The set containing the version of which the url will be updated\\n     @param label The label of the requested version\\n     @param index The index of the url\\n     @param newUrl The new url to be updated to\\n     */\\n    function updateVersionURL(\\n        Set storage set,\\n        uint8[3] memory label,\\n        uint256 index,\\n        string memory newUrl\\n    ) internal {\\n        string memory labelKey = uintArray3ToString(label);\\n        require(\\n            set.versions[labelKey].urls.length != 0,\\n            \\\"#Versions: The version does not exist\\\"\\n        );\\n        require(\\n            set.versions[labelKey].urls.length > index,\\n            \\\"#Versions: The url does not exist on that version\\\"\\n        );\\n        set.versions[labelKey].urls[index].url = newUrl;\\n    }\\n\\n    /**\\n     @dev gets all the version labels of a given set\\n     @param set The set containing the versions\\n     @return labels an array of labels as strings\\n    */\\n    function getAllLabels(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (string[] memory)\\n    {\\n        return set.labels;\\n    }\\n\\n    /**\\n     @dev gets all the versions of a given set\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getAllVersions(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        return getVersionsFromLabels(set, set.labels);\\n    }\\n\\n    /**\\n     @dev gets the versions of a given array of labels as strings, reverts if no labels are given\\n     @param set The set containing the versions\\n     @return versions an array of versions\\n    */\\n    function getVersionsFromLabels(\\n        Set storage set,\\n        string[] memory _labels\\n    )\\n        internal\\n        view\\n        returns (Version[] memory)\\n    {\\n        require(_labels.length != 0, \\\"#Versions: No labels provided\\\");\\n        Version[] memory versionArray = new Version[](_labels.length);\\n\\n        for (uint256 i = 0; i < _labels.length; i++) {\\n                versionArray[i] = set.versions[_labels[i]];\\n        }\\n\\n        return versionArray;\\n    }\\n\\n    /**\\n     @dev gets the last added version of a given set, reverts if no versions are in the set\\n     @param set The set containing the versions\\n     @return version the last added version\\n    */\\n    function getLatestVersion(\\n        Set storage set\\n    )\\n        internal\\n        view\\n        returns (Version memory)\\n    {\\n        require(\\n            set.labels.length != 0,\\n            \\\"#Versions: No versions exist\\\"\\n        );\\n        return set.versions[\\n            set.labels[set.labels.length - 1]\\n        ];\\n    }\\n\\n    /**\\n     @dev A helper function to convert a three length array of numbers into a semantic style verison label\\n     @param label the label as a uint8[3] array\\n     @return label the label as a string\\n    */\\n    function uintArray3ToString (uint8[3] memory label)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return string(abi.encodePacked(\\n            StringsUpgradeable.toString(label[0]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[1]),\\n            \\\".\\\",\\n            StringsUpgradeable.toString(label[2])\\n        ));\\n    }\\n}\",\"keccak256\":\"0x0c57f7a1764998753c382556ffee075a74875dc39460cb3bed3842bf5fbb9012\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Can safely be used for generic base64Encode and numberToString functions",
    "kind": "dev",
    "methods": {
      "addressToString(address)": {
        "params": {
          "_address": "address to return as a string"
        }
      },
      "base64Encode(bytes)": {
        "params": {
          "unencoded": "bytes to base64-encode"
        }
      },
      "createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "media": "The image Url, animation Url and version label of the media to be rendered",
          "name": "Name of NFT in metadata",
          "tokenAddress": "Address of the NFT",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address,uint256)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "media": "The image Url, animation Url and version label of the media to be rendered",
          "name": "Name of NFT in metadata",
          "tokenAddress": "Address of the NFT",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "params": {
          "description": "Description of NFT in metadata",
          "editionSize": "Size of entire edition to show",
          "mediaData": "Data for media to include in json object",
          "name": "Name of NFT in metadata",
          "tokenOfEdition": "Token ID for specific token"
        }
      },
      "encodeMetadataJSON(bytes)": {
        "params": {
          "json": "Raw json to base64 and turn into a data-uri"
        }
      },
      "numberToString(uint256)": {
        "params": {
          "value": "number to return as a string"
        }
      },
      "tokenMediaData((string,string,string,uint8[3]),uint256,address)": {
        "params": {
          "media": "urls of image and animation media with version label"
        }
      },
      "tokenMediaData((string,string,string,uint8[3]),uint256,address,uint256)": {
        "params": {
          "media": "urls of image and animation media with version label"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressToString(address)": {
        "notice": "converts address to string"
      },
      "createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address)": {
        "notice": "Generate edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "createMetadataEdition(string,string,(string,string,string,uint8[3]),uint256,uint256,address,uint256)": {
        "notice": "Generate edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "createMetadataJSON(string,string,string,uint256,uint256)": {
        "notice": "Function to create the metadata json string for the nft edition"
      },
      "encodeMetadataJSON(bytes)": {
        "notice": "Encodes the argument json bytes into base64-data uri format"
      },
      "numberToString(uint256)": {
        "notice": "Proxy to openzeppelin's toString function"
      },
      "tokenMediaData((string,string,string,uint8[3]),uint256,address)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata"
      },
      "tokenMediaData((string,string,string,uint8[3]),uint256,address,uint256)": {
        "notice": "Generates edition metadata from storage information as base64-json blob Combines the media data and metadata"
      }
    },
    "notice": "Shared NFT logic for rendering metadata associated with editions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}